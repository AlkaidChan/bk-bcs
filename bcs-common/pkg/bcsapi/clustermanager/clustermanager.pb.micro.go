// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: clustermanager.proto

package clustermanager

import (
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/struct"
	_ "github.com/golang/protobuf/ptypes/wrappers"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ClusterManager service

func NewClusterManagerEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		&api.Endpoint{
			Name:    "ClusterManager.CreateCluster",
			Path:    []string{"/clustermanager/v1/cluster"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.RetryCreateClusterTask",
			Path:    []string{"/clustermanager/v1/cluster/{clusterID}/retry"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.CheckCloudKubeConfig",
			Path:    []string{"/clustermanager/v1/cloud/kubeConfig"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.ImportCluster",
			Path:    []string{"/clustermanager/v1/cluster/import"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.UpdateCluster",
			Path:    []string{"/clustermanager/v1/cluster/{clusterID}"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.AddNodesToCluster",
			Path:    []string{"/clustermanager/v1/cluster/{clusterID}/node"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.DeleteNodesFromCluster",
			Path:    []string{"/clustermanager/v1/cluster/{clusterID}/node"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.ListNodesInCluster",
			Path:    []string{"/clustermanager/v1/cluster/{clusterID}/node"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.DeleteCluster",
			Path:    []string{"/clustermanager/v1/cluster/{clusterID}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.GetCluster",
			Path:    []string{"/clustermanager/v1/cluster/{clusterID}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.ListCluster",
			Path:    []string{"/clustermanager/v1/cluster"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.ListCommonCluster",
			Path:    []string{"/clustermanager/v1/sharedclusters"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.GetNode",
			Path:    []string{"/clustermanager/v1/node/{innerIP}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.GetNodeInfo",
			Path:    []string{"/clustermanager/v1/node/{innerIP}/info"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.UpdateNode",
			Path:    []string{"/clustermanager/v1/node"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.CheckNodeInCluster",
			Path:    []string{"/clustermanager/v1/node/available"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.CordonNode",
			Path:    []string{"/clustermanager/v1/node/cordon"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.UnCordonNode",
			Path:    []string{"/clustermanager/v1/node/uncordon"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.GetClusterCredential",
			Path:    []string{"/clustermanager/v1/clustercredential/{serverKey}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.UpdateClusterCredential",
			Path:    []string{"/clustermanager/v1/clustercredential/{serverKey}"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.DeleteClusterCredential",
			Path:    []string{"/clustermanager/v1/clustercredential/{serverKey}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.ListClusterCredential",
			Path:    []string{"/clustermanager/v1/clustercredential"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.InitFederationCluster",
			Path:    []string{"/clustermanager/v1/initfedcluster"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.AddFederatedCluster",
			Path:    []string{"/clustermanager/v1/addfederatedcluster"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.CreateNamespace",
			Path:    []string{"/clustermanager/v1/namespace/{federationClusterID}/{name}"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.UpdateNamespace",
			Path:    []string{"/clustermanager/v1/namespace/{federationClusterID}/{name}"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.DeleteNamespace",
			Path:    []string{"/clustermanager/v1/namespace/{federationClusterID}/{name}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.GetNamespace",
			Path:    []string{"/clustermanager/v1/namespace/{federationClusterID}/{name}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.ListNamespace",
			Path:    []string{"/clustermanager/v1/namespace"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.CreateNamespaceQuota",
			Path:    []string{"/clustermanager/v1/namespacequota/{federationClusterID}/{namespace}"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.UpdateNamespaceQuota",
			Path:    []string{"/clustermanager/v1/namespacequota/{federationClusterID}/{namespace}"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.DeleteNamespaceQuota",
			Path:    []string{"/clustermanager/v1/namespacequota/{federationClusterID}/{namespace}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.GetNamespaceQuota",
			Path:    []string{"/clustermanager/v1/namespacequota/{federationClusterID}/{namespace}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.ListNamespaceQuota",
			Path:    []string{"/clustermanager/v1/namespacequota"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.CreateNamespaceWithQuota",
			Path:    []string{"/clustermanager/v1/namespacewithquota"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.CreateProject",
			Path:    []string{"/clustermanager/v1/project"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.UpdateProject",
			Path:    []string{"/clustermanager/v1/project/{projectID}"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.DeleteProject",
			Path:    []string{"/clustermanager/v1/project/{projectID}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.GetProject",
			Path:    []string{"/clustermanager/v1/project/{projectID}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.ListProject",
			Path:    []string{"/clustermanager/v1/project"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.CreateCloud",
			Path:    []string{"/clustermanager/v1/cloud"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.UpdateCloud",
			Path:    []string{"/clustermanager/v1/cloud/{cloudID}"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.DeleteCloud",
			Path:    []string{"/clustermanager/v1/cloud/{cloudID}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.GetCloud",
			Path:    []string{"/clustermanager/v1/cloud/{cloudID}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.ListCloud",
			Path:    []string{"/clustermanager/v1/cloud"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.CreateCloudVPC",
			Path:    []string{"/clustermanager/v1/cloudvpc"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.UpdateCloudVPC",
			Path:    []string{"/clustermanager/v1/cloudvpc/{cloudID}/{vpcID}"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.DeleteCloudVPC",
			Path:    []string{"/clustermanager/v1/cloudvpc/{cloudID}/{vpcID}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.ListCloudVPC",
			Path:    []string{"/clustermanager/v1/cloudvpc"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.ListCloudRegions",
			Path:    []string{"/clustermanager/v1/cloudregion/{cloudID}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.GetVPCCidr",
			Path:    []string{"/clustermanager/v1/vpccidr/{vpcID}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.CreateNodeGroup",
			Path:    []string{"/clustermanager/v1/nodegroup"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.UpdateNodeGroup",
			Path:    []string{"/clustermanager/v1/nodegroup/{nodeGroupID}"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.DeleteNodeGroup",
			Path:    []string{"/clustermanager/v1/nodegroup/{nodeGroupID}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.GetNodeGroup",
			Path:    []string{"/clustermanager/v1/nodegroup/{nodeGroupID}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.ListNodeGroup",
			Path:    []string{"/clustermanager/v1/nodegroup"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.MoveNodesToGroup",
			Path:    []string{"/clustermanager/v1/nodegroup/{nodeGroupID}/node"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.RemoveNodesFromGroup",
			Path:    []string{"/clustermanager/v1/nodegroup/{nodeGroupID}/node"},
			Method:  []string{"DELETE"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.CleanNodesInGroup",
			Path:    []string{"/clustermanager/v1/nodegroup/{nodeGroupID}/groupnode"},
			Method:  []string{"DELETE"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.ListNodesInGroup",
			Path:    []string{"/clustermanager/v1/nodegroup/{nodeGroupID}/node"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.UpdateGroupDesiredNode",
			Path:    []string{"/clustermanager/v1/nodegroup/{nodeGroupID}/desirednode"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.UpdateGroupDesiredSize",
			Path:    []string{"/clustermanager/v1/nodegroup/{nodeGroupID}/desiredsize"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.UpdateGroupMinMaxSize",
			Path:    []string{"/clustermanager/v1/nodegroup/{nodeGroupID}/boundsize"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.EnableNodeGroupAutoScale",
			Path:    []string{"/clustermanager/v1/nodegroup/{nodeGroupID}/autoscale/enable"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.DisableNodeGroupAutoScale",
			Path:    []string{"/clustermanager/v1/nodegroup/{nodeGroupID}/autoscale/disable"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.CreateTask",
			Path:    []string{"/clustermanager/v1/task"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.RetryTask",
			Path:    []string{"/clustermanager/v1/task/{taskID}/retry"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.UpdateTask",
			Path:    []string{"/clustermanager/v1/task/{taskID}"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.DeleteTask",
			Path:    []string{"/clustermanager/v1/task/{taskID}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.GetTask",
			Path:    []string{"/clustermanager/v1/task/{taskID}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.ListTask",
			Path:    []string{"/clustermanager/v1/task"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.CreateAutoScalingOption",
			Path:    []string{"/clustermanager/v1/autoscalingoption"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.UpdateAutoScalingOption",
			Path:    []string{"/clustermanager/v1/autoscalingoption/{clusterID}"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.DeleteAutoScalingOption",
			Path:    []string{"/clustermanager/v1/autoscalingoption/{clusterID}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.GetAutoScalingOption",
			Path:    []string{"/clustermanager/v1/autoscalingoption/{clusterID}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.ListAutoScalingOption",
			Path:    []string{"/clustermanager/v1/autoscalingoption"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.CreateNodeTemplate",
			Path:    []string{"/clustermanager/v1/projects/{projectID}/nodetemplates"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.UpdateNodeTemplate",
			Path:    []string{"/clustermanager/v1/projects/{projectID}/nodetemplates/{nodeTemplateID}"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.DeleteNodeTemplate",
			Path:    []string{"/clustermanager/v1/projects/{projectID}/nodetemplates/{nodeTemplateID}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.ListNodeTemplate",
			Path:    []string{"/clustermanager/v1/projects/{projectID}/nodetemplates"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.GetNodeTemplate",
			Path:    []string{"/clustermanager/v1/projects/{projectID}/nodetemplates/{nodeTemplateID}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.CreateCloudAccount",
			Path:    []string{"/clustermanager/v1/clouds/{cloudID}/accounts"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.UpdateCloudAccount",
			Path:    []string{"/clustermanager/v1/clouds/{cloudID}/accounts/{accountID}"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.DeleteCloudAccount",
			Path:    []string{"/clustermanager/v1/clouds/{cloudID}/accounts/{accountID}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.ListCloudAccount",
			Path:    []string{"/clustermanager/v1/clouds/{cloudID}/accounts"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.GetCloudRegions",
			Path:    []string{"/clustermanager/v1/clouds/{cloudID}/regions"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.GetCloudRegionZones",
			Path:    []string{"/clustermanager/v1/clouds/{cloudID}/zones"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.ListCloudRegionCluster",
			Path:    []string{"/clustermanager/v1/clouds/{cloudID}/clusters"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.ListCloudSubnets",
			Path:    []string{"/clustermanager/v1/clouds/{cloudID}/subnets"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.ListCloudSecurityGroups",
			Path:    []string{"/clustermanager/v1/clouds/{cloudID}/securitygroups"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.ListCloudInstanceTypes",
			Path:    []string{"/clustermanager/v1/clouds/{cloudID}/instancetypes"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.ListCloudOsImage",
			Path:    []string{"/clustermanager/v1/clouds/{cloudID}/osimage"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.GetBkSopsTemplateList",
			Path:    []string{"/clustermanager/v1/bksops/business/{businessID}/templates"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.GetBkSopsTemplateInfo",
			Path:    []string{"/clustermanager/v1/bksops/business/{businessID}/templates/{templateID}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.GetInnerTemplateValues",
			Path:    []string{"/clustermanager/v1/bksops/templatevalues"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.DebugBkSopsTask",
			Path:    []string{"/clustermanager/v1/bksops/debug"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.CreateCloudModuleFlag",
			Path:    []string{"/clustermanager/v1/clouds/{cloudID}/versions/{version}/modules"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.UpdateCloudModuleFlag",
			Path:    []string{"/clustermanager/v1/clouds/{cloudID}/versions/{version}/modules/{moduleID}"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.DeleteCloudModuleFlag",
			Path:    []string{"/clustermanager/v1/clouds/{cloudID}/versions/{version}/modules/{moduleID}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.ListCloudModuleFlag",
			Path:    []string{"/clustermanager/v1/clouds/{cloudID}/versions/{version}/modules/{moduleID}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterManager.Health",
			Path:    []string{"/clustermanager/v1/health"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
	}
}

// Client API for ClusterManager service

type ClusterManagerService interface {
	//* cluster management
	CreateCluster(ctx context.Context, in *CreateClusterReq, opts ...client.CallOption) (*CreateClusterResp, error)
	RetryCreateClusterTask(ctx context.Context, in *RetryCreateClusterReq, opts ...client.CallOption) (*RetryCreateClusterResp, error)
	CheckCloudKubeConfig(ctx context.Context, in *KubeConfigReq, opts ...client.CallOption) (*KubeConfigResp, error)
	ImportCluster(ctx context.Context, in *ImportClusterReq, opts ...client.CallOption) (*ImportClusterResp, error)
	UpdateCluster(ctx context.Context, in *UpdateClusterReq, opts ...client.CallOption) (*UpdateClusterResp, error)
	AddNodesToCluster(ctx context.Context, in *AddNodesRequest, opts ...client.CallOption) (*AddNodesResponse, error)
	DeleteNodesFromCluster(ctx context.Context, in *DeleteNodesRequest, opts ...client.CallOption) (*DeleteNodesResponse, error)
	ListNodesInCluster(ctx context.Context, in *ListNodesInClusterRequest, opts ...client.CallOption) (*ListNodesInClusterResponse, error)
	DeleteCluster(ctx context.Context, in *DeleteClusterReq, opts ...client.CallOption) (*DeleteClusterResp, error)
	GetCluster(ctx context.Context, in *GetClusterReq, opts ...client.CallOption) (*GetClusterResp, error)
	ListCluster(ctx context.Context, in *ListClusterReq, opts ...client.CallOption) (*ListClusterResp, error)
	ListCommonCluster(ctx context.Context, in *ListCommonClusterReq, opts ...client.CallOption) (*ListCommonClusterResp, error)
	//* node management
	GetNode(ctx context.Context, in *GetNodeRequest, opts ...client.CallOption) (*GetNodeResponse, error)
	GetNodeInfo(ctx context.Context, in *GetNodeInfoRequest, opts ...client.CallOption) (*GetNodeInfoResponse, error)
	UpdateNode(ctx context.Context, in *UpdateNodeRequest, opts ...client.CallOption) (*UpdateNodeResponse, error)
	CheckNodeInCluster(ctx context.Context, in *CheckNodesRequest, opts ...client.CallOption) (*CheckNodesResponse, error)
	CordonNode(ctx context.Context, in *CordonNodeRequest, opts ...client.CallOption) (*CordonNodeResponse, error)
	UnCordonNode(ctx context.Context, in *UnCordonNodeRequest, opts ...client.CallOption) (*UnCordonNodeResponse, error)
	//* cluster credential management
	GetClusterCredential(ctx context.Context, in *GetClusterCredentialReq, opts ...client.CallOption) (*GetClusterCredentialResp, error)
	UpdateClusterCredential(ctx context.Context, in *UpdateClusterCredentialReq, opts ...client.CallOption) (*UpdateClusterCredentialResp, error)
	DeleteClusterCredential(ctx context.Context, in *DeleteClusterCredentialReq, opts ...client.CallOption) (*DeleteClusterCredentialResp, error)
	ListClusterCredential(ctx context.Context, in *ListClusterCredentialReq, opts ...client.CallOption) (*ListClusterCredentialResp, error)
	//* federation cluster management
	InitFederationCluster(ctx context.Context, in *InitFederationClusterReq, opts ...client.CallOption) (*InitFederationClusterResp, error)
	AddFederatedCluster(ctx context.Context, in *AddFederatedClusterReq, opts ...client.CallOption) (*AddFederatedClusterResp, error)
	//* namespace management *
	CreateNamespace(ctx context.Context, in *CreateNamespaceReq, opts ...client.CallOption) (*CreateNamespaceResp, error)
	UpdateNamespace(ctx context.Context, in *UpdateNamespaceReq, opts ...client.CallOption) (*UpdateNamespaceResp, error)
	DeleteNamespace(ctx context.Context, in *DeleteNamespaceReq, opts ...client.CallOption) (*DeleteNamespaceResp, error)
	GetNamespace(ctx context.Context, in *GetNamespaceReq, opts ...client.CallOption) (*GetNamespaceResp, error)
	ListNamespace(ctx context.Context, in *ListNamespaceReq, opts ...client.CallOption) (*ListNamespaceResp, error)
	//* NamespaceQuota management *
	CreateNamespaceQuota(ctx context.Context, in *CreateNamespaceQuotaReq, opts ...client.CallOption) (*CreateNamespaceQuotaResp, error)
	UpdateNamespaceQuota(ctx context.Context, in *UpdateNamespaceQuotaReq, opts ...client.CallOption) (*UpdateNamespaceQuotaResp, error)
	DeleteNamespaceQuota(ctx context.Context, in *DeleteNamespaceQuotaReq, opts ...client.CallOption) (*DeleteNamespaceQuotaResp, error)
	GetNamespaceQuota(ctx context.Context, in *GetNamespaceQuotaReq, opts ...client.CallOption) (*GetNamespaceQuotaResp, error)
	ListNamespaceQuota(ctx context.Context, in *ListNamespaceQuotaReq, opts ...client.CallOption) (*ListNamespaceQuotaResp, error)
	CreateNamespaceWithQuota(ctx context.Context, in *CreateNamespaceWithQuotaReq, opts ...client.CallOption) (*CreateNamespaceWithQuotaResp, error)
	//* project information management *
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...client.CallOption) (*CreateProjectResponse, error)
	UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...client.CallOption) (*UpdateProjectResponse, error)
	DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...client.CallOption) (*DeleteProjectResponse, error)
	GetProject(ctx context.Context, in *GetProjectRequest, opts ...client.CallOption) (*GetProjectResponse, error)
	ListProject(ctx context.Context, in *ListProjectRequest, opts ...client.CallOption) (*ListProjectResponse, error)
	//* Cloud information management *
	CreateCloud(ctx context.Context, in *CreateCloudRequest, opts ...client.CallOption) (*CreateCloudResponse, error)
	UpdateCloud(ctx context.Context, in *UpdateCloudRequest, opts ...client.CallOption) (*UpdateCloudResponse, error)
	DeleteCloud(ctx context.Context, in *DeleteCloudRequest, opts ...client.CallOption) (*DeleteCloudResponse, error)
	GetCloud(ctx context.Context, in *GetCloudRequest, opts ...client.CallOption) (*GetCloudResponse, error)
	ListCloud(ctx context.Context, in *ListCloudRequest, opts ...client.CallOption) (*ListCloudResponse, error)
	//* Cloud VPC information management *
	CreateCloudVPC(ctx context.Context, in *CreateCloudVPCRequest, opts ...client.CallOption) (*CreateCloudVPCResponse, error)
	UpdateCloudVPC(ctx context.Context, in *UpdateCloudVPCRequest, opts ...client.CallOption) (*UpdateCloudVPCResponse, error)
	DeleteCloudVPC(ctx context.Context, in *DeleteCloudVPCRequest, opts ...client.CallOption) (*DeleteCloudVPCResponse, error)
	ListCloudVPC(ctx context.Context, in *ListCloudVPCRequest, opts ...client.CallOption) (*ListCloudVPCResponse, error)
	ListCloudRegions(ctx context.Context, in *ListCloudRegionsRequest, opts ...client.CallOption) (*ListCloudRegionsResponse, error)
	GetVPCCidr(ctx context.Context, in *GetVPCCidrRequest, opts ...client.CallOption) (*GetVPCCidrResponse, error)
	//* NodeGroup information management *
	CreateNodeGroup(ctx context.Context, in *CreateNodeGroupRequest, opts ...client.CallOption) (*CreateNodeGroupResponse, error)
	UpdateNodeGroup(ctx context.Context, in *UpdateNodeGroupRequest, opts ...client.CallOption) (*UpdateNodeGroupResponse, error)
	DeleteNodeGroup(ctx context.Context, in *DeleteNodeGroupRequest, opts ...client.CallOption) (*DeleteNodeGroupResponse, error)
	GetNodeGroup(ctx context.Context, in *GetNodeGroupRequest, opts ...client.CallOption) (*GetNodeGroupResponse, error)
	ListNodeGroup(ctx context.Context, in *ListNodeGroupRequest, opts ...client.CallOption) (*ListNodeGroupResponse, error)
	MoveNodesToGroup(ctx context.Context, in *MoveNodesToGroupRequest, opts ...client.CallOption) (*MoveNodesToGroupResponse, error)
	RemoveNodesFromGroup(ctx context.Context, in *RemoveNodesFromGroupRequest, opts ...client.CallOption) (*RemoveNodesFromGroupResponse, error)
	CleanNodesInGroup(ctx context.Context, in *CleanNodesInGroupRequest, opts ...client.CallOption) (*CleanNodesInGroupResponse, error)
	ListNodesInGroup(ctx context.Context, in *GetNodeGroupRequest, opts ...client.CallOption) (*ListNodesInGroupResponse, error)
	UpdateGroupDesiredNode(ctx context.Context, in *UpdateGroupDesiredNodeRequest, opts ...client.CallOption) (*UpdateGroupDesiredNodeResponse, error)
	UpdateGroupDesiredSize(ctx context.Context, in *UpdateGroupDesiredSizeRequest, opts ...client.CallOption) (*UpdateGroupDesiredSizeResponse, error)
	UpdateGroupMinMaxSize(ctx context.Context, in *UpdateGroupMinMaxSizeRequest, opts ...client.CallOption) (*UpdateGroupMinMaxSizeResponse, error)
	EnableNodeGroupAutoScale(ctx context.Context, in *EnableNodeGroupAutoScaleRequest, opts ...client.CallOption) (*EnableNodeGroupAutoScaleResponse, error)
	DisableNodeGroupAutoScale(ctx context.Context, in *DisableNodeGroupAutoScaleRequest, opts ...client.CallOption) (*DisableNodeGroupAutoScaleResponse, error)
	//* Task information management *
	CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...client.CallOption) (*CreateTaskResponse, error)
	RetryTask(ctx context.Context, in *RetryTaskRequest, opts ...client.CallOption) (*RetryTaskResponse, error)
	UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...client.CallOption) (*UpdateTaskResponse, error)
	DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...client.CallOption) (*DeleteTaskResponse, error)
	GetTask(ctx context.Context, in *GetTaskRequest, opts ...client.CallOption) (*GetTaskResponse, error)
	ListTask(ctx context.Context, in *ListTaskRequest, opts ...client.CallOption) (*ListTaskResponse, error)
	//* ClusterAutoScalingOption information management *
	CreateAutoScalingOption(ctx context.Context, in *CreateAutoScalingOptionRequest, opts ...client.CallOption) (*CreateAutoScalingOptionResponse, error)
	UpdateAutoScalingOption(ctx context.Context, in *UpdateAutoScalingOptionRequest, opts ...client.CallOption) (*UpdateAutoScalingOptionResponse, error)
	DeleteAutoScalingOption(ctx context.Context, in *DeleteAutoScalingOptionRequest, opts ...client.CallOption) (*DeleteAutoScalingOptionResponse, error)
	GetAutoScalingOption(ctx context.Context, in *GetAutoScalingOptionRequest, opts ...client.CallOption) (*GetAutoScalingOptionResponse, error)
	ListAutoScalingOption(ctx context.Context, in *ListAutoScalingOptionRequest, opts ...client.CallOption) (*ListAutoScalingOptionResponse, error)
	// Cloud NodeTemplate info management
	CreateNodeTemplate(ctx context.Context, in *CreateNodeTemplateRequest, opts ...client.CallOption) (*CreateNodeTemplateResponse, error)
	UpdateNodeTemplate(ctx context.Context, in *UpdateNodeTemplateRequest, opts ...client.CallOption) (*UpdateNodeTemplateResponse, error)
	DeleteNodeTemplate(ctx context.Context, in *DeleteNodeTemplateRequest, opts ...client.CallOption) (*DeleteNodeTemplateResponse, error)
	ListNodeTemplate(ctx context.Context, in *ListNodeTemplateRequest, opts ...client.CallOption) (*ListNodeTemplateResponse, error)
	GetNodeTemplate(ctx context.Context, in *GetNodeTemplateRequest, opts ...client.CallOption) (*GetNodeTemplateResponse, error)
	// Cloud Account information management
	CreateCloudAccount(ctx context.Context, in *CreateCloudAccountRequest, opts ...client.CallOption) (*CreateCloudAccountResponse, error)
	UpdateCloudAccount(ctx context.Context, in *UpdateCloudAccountRequest, opts ...client.CallOption) (*UpdateCloudAccountResponse, error)
	DeleteCloudAccount(ctx context.Context, in *DeleteCloudAccountRequest, opts ...client.CallOption) (*DeleteCloudAccountResponse, error)
	ListCloudAccount(ctx context.Context, in *ListCloudAccountRequest, opts ...client.CallOption) (*ListCloudAccountResponse, error)
	// Cloud Resource management
	GetCloudRegions(ctx context.Context, in *GetCloudRegionsRequest, opts ...client.CallOption) (*GetCloudRegionsResponse, error)
	GetCloudRegionZones(ctx context.Context, in *GetCloudRegionZonesRequest, opts ...client.CallOption) (*GetCloudRegionZonesResponse, error)
	ListCloudRegionCluster(ctx context.Context, in *ListCloudRegionClusterRequest, opts ...client.CallOption) (*ListCloudRegionClusterResponse, error)
	ListCloudSubnets(ctx context.Context, in *ListCloudSubnetsRequest, opts ...client.CallOption) (*ListCloudSubnetsResponse, error)
	ListCloudSecurityGroups(ctx context.Context, in *ListCloudSecurityGroupsRequest, opts ...client.CallOption) (*ListCloudSecurityGroupsResponse, error)
	ListCloudInstanceTypes(ctx context.Context, in *ListCloudInstanceTypeRequest, opts ...client.CallOption) (*ListCloudInstanceTypeResponse, error)
	ListCloudOsImage(ctx context.Context, in *ListCloudOsImageRequest, opts ...client.CallOption) (*ListCloudOsImageResponse, error)
	// thirdParty interface(cmdb/bksops等)
	GetBkSopsTemplateList(ctx context.Context, in *GetBkSopsTemplateListRequest, opts ...client.CallOption) (*GetBkSopsTemplateListResponse, error)
	GetBkSopsTemplateInfo(ctx context.Context, in *GetBkSopsTemplateInfoRequest, opts ...client.CallOption) (*GetBkSopsTemplateInfoResponse, error)
	GetInnerTemplateValues(ctx context.Context, in *GetInnerTemplateValuesRequest, opts ...client.CallOption) (*GetInnerTemplateValuesResponse, error)
	DebugBkSopsTask(ctx context.Context, in *DebugBkSopsTaskRequest, opts ...client.CallOption) (*DebugBkSopsTaskResponse, error)
	// Cloud module flag management
	CreateCloudModuleFlag(ctx context.Context, in *CreateCloudModuleFlagRequest, opts ...client.CallOption) (*CreateCloudModuleFlagResponse, error)
	UpdateCloudModuleFlag(ctx context.Context, in *UpdateCloudModuleFlagRequest, opts ...client.CallOption) (*UpdateCloudModuleFlagResponse, error)
	DeleteCloudModuleFlag(ctx context.Context, in *DeleteCloudModuleFlagRequest, opts ...client.CallOption) (*DeleteCloudModuleFlagResponse, error)
	ListCloudModuleFlag(ctx context.Context, in *ListCloudModuleFlagRequest, opts ...client.CallOption) (*ListCloudModuleFlagResponse, error)
	// cluster manager health interface
	Health(ctx context.Context, in *HealthRequest, opts ...client.CallOption) (*HealthResponse, error)
}

type clusterManagerService struct {
	c    client.Client
	name string
}

func NewClusterManagerService(name string, c client.Client) ClusterManagerService {
	return &clusterManagerService{
		c:    c,
		name: name,
	}
}

func (c *clusterManagerService) CreateCluster(ctx context.Context, in *CreateClusterReq, opts ...client.CallOption) (*CreateClusterResp, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.CreateCluster", in)
	out := new(CreateClusterResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) RetryCreateClusterTask(ctx context.Context, in *RetryCreateClusterReq, opts ...client.CallOption) (*RetryCreateClusterResp, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.RetryCreateClusterTask", in)
	out := new(RetryCreateClusterResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) CheckCloudKubeConfig(ctx context.Context, in *KubeConfigReq, opts ...client.CallOption) (*KubeConfigResp, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.CheckCloudKubeConfig", in)
	out := new(KubeConfigResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) ImportCluster(ctx context.Context, in *ImportClusterReq, opts ...client.CallOption) (*ImportClusterResp, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.ImportCluster", in)
	out := new(ImportClusterResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) UpdateCluster(ctx context.Context, in *UpdateClusterReq, opts ...client.CallOption) (*UpdateClusterResp, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.UpdateCluster", in)
	out := new(UpdateClusterResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) AddNodesToCluster(ctx context.Context, in *AddNodesRequest, opts ...client.CallOption) (*AddNodesResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.AddNodesToCluster", in)
	out := new(AddNodesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) DeleteNodesFromCluster(ctx context.Context, in *DeleteNodesRequest, opts ...client.CallOption) (*DeleteNodesResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.DeleteNodesFromCluster", in)
	out := new(DeleteNodesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) ListNodesInCluster(ctx context.Context, in *ListNodesInClusterRequest, opts ...client.CallOption) (*ListNodesInClusterResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.ListNodesInCluster", in)
	out := new(ListNodesInClusterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) DeleteCluster(ctx context.Context, in *DeleteClusterReq, opts ...client.CallOption) (*DeleteClusterResp, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.DeleteCluster", in)
	out := new(DeleteClusterResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) GetCluster(ctx context.Context, in *GetClusterReq, opts ...client.CallOption) (*GetClusterResp, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.GetCluster", in)
	out := new(GetClusterResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) ListCluster(ctx context.Context, in *ListClusterReq, opts ...client.CallOption) (*ListClusterResp, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.ListCluster", in)
	out := new(ListClusterResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) ListCommonCluster(ctx context.Context, in *ListCommonClusterReq, opts ...client.CallOption) (*ListCommonClusterResp, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.ListCommonCluster", in)
	out := new(ListCommonClusterResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) GetNode(ctx context.Context, in *GetNodeRequest, opts ...client.CallOption) (*GetNodeResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.GetNode", in)
	out := new(GetNodeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) GetNodeInfo(ctx context.Context, in *GetNodeInfoRequest, opts ...client.CallOption) (*GetNodeInfoResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.GetNodeInfo", in)
	out := new(GetNodeInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) UpdateNode(ctx context.Context, in *UpdateNodeRequest, opts ...client.CallOption) (*UpdateNodeResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.UpdateNode", in)
	out := new(UpdateNodeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) CheckNodeInCluster(ctx context.Context, in *CheckNodesRequest, opts ...client.CallOption) (*CheckNodesResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.CheckNodeInCluster", in)
	out := new(CheckNodesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) CordonNode(ctx context.Context, in *CordonNodeRequest, opts ...client.CallOption) (*CordonNodeResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.CordonNode", in)
	out := new(CordonNodeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) UnCordonNode(ctx context.Context, in *UnCordonNodeRequest, opts ...client.CallOption) (*UnCordonNodeResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.UnCordonNode", in)
	out := new(UnCordonNodeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) GetClusterCredential(ctx context.Context, in *GetClusterCredentialReq, opts ...client.CallOption) (*GetClusterCredentialResp, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.GetClusterCredential", in)
	out := new(GetClusterCredentialResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) UpdateClusterCredential(ctx context.Context, in *UpdateClusterCredentialReq, opts ...client.CallOption) (*UpdateClusterCredentialResp, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.UpdateClusterCredential", in)
	out := new(UpdateClusterCredentialResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) DeleteClusterCredential(ctx context.Context, in *DeleteClusterCredentialReq, opts ...client.CallOption) (*DeleteClusterCredentialResp, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.DeleteClusterCredential", in)
	out := new(DeleteClusterCredentialResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) ListClusterCredential(ctx context.Context, in *ListClusterCredentialReq, opts ...client.CallOption) (*ListClusterCredentialResp, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.ListClusterCredential", in)
	out := new(ListClusterCredentialResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) InitFederationCluster(ctx context.Context, in *InitFederationClusterReq, opts ...client.CallOption) (*InitFederationClusterResp, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.InitFederationCluster", in)
	out := new(InitFederationClusterResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) AddFederatedCluster(ctx context.Context, in *AddFederatedClusterReq, opts ...client.CallOption) (*AddFederatedClusterResp, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.AddFederatedCluster", in)
	out := new(AddFederatedClusterResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) CreateNamespace(ctx context.Context, in *CreateNamespaceReq, opts ...client.CallOption) (*CreateNamespaceResp, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.CreateNamespace", in)
	out := new(CreateNamespaceResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) UpdateNamespace(ctx context.Context, in *UpdateNamespaceReq, opts ...client.CallOption) (*UpdateNamespaceResp, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.UpdateNamespace", in)
	out := new(UpdateNamespaceResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) DeleteNamespace(ctx context.Context, in *DeleteNamespaceReq, opts ...client.CallOption) (*DeleteNamespaceResp, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.DeleteNamespace", in)
	out := new(DeleteNamespaceResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) GetNamespace(ctx context.Context, in *GetNamespaceReq, opts ...client.CallOption) (*GetNamespaceResp, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.GetNamespace", in)
	out := new(GetNamespaceResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) ListNamespace(ctx context.Context, in *ListNamespaceReq, opts ...client.CallOption) (*ListNamespaceResp, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.ListNamespace", in)
	out := new(ListNamespaceResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) CreateNamespaceQuota(ctx context.Context, in *CreateNamespaceQuotaReq, opts ...client.CallOption) (*CreateNamespaceQuotaResp, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.CreateNamespaceQuota", in)
	out := new(CreateNamespaceQuotaResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) UpdateNamespaceQuota(ctx context.Context, in *UpdateNamespaceQuotaReq, opts ...client.CallOption) (*UpdateNamespaceQuotaResp, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.UpdateNamespaceQuota", in)
	out := new(UpdateNamespaceQuotaResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) DeleteNamespaceQuota(ctx context.Context, in *DeleteNamespaceQuotaReq, opts ...client.CallOption) (*DeleteNamespaceQuotaResp, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.DeleteNamespaceQuota", in)
	out := new(DeleteNamespaceQuotaResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) GetNamespaceQuota(ctx context.Context, in *GetNamespaceQuotaReq, opts ...client.CallOption) (*GetNamespaceQuotaResp, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.GetNamespaceQuota", in)
	out := new(GetNamespaceQuotaResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) ListNamespaceQuota(ctx context.Context, in *ListNamespaceQuotaReq, opts ...client.CallOption) (*ListNamespaceQuotaResp, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.ListNamespaceQuota", in)
	out := new(ListNamespaceQuotaResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) CreateNamespaceWithQuota(ctx context.Context, in *CreateNamespaceWithQuotaReq, opts ...client.CallOption) (*CreateNamespaceWithQuotaResp, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.CreateNamespaceWithQuota", in)
	out := new(CreateNamespaceWithQuotaResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...client.CallOption) (*CreateProjectResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.CreateProject", in)
	out := new(CreateProjectResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...client.CallOption) (*UpdateProjectResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.UpdateProject", in)
	out := new(UpdateProjectResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...client.CallOption) (*DeleteProjectResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.DeleteProject", in)
	out := new(DeleteProjectResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) GetProject(ctx context.Context, in *GetProjectRequest, opts ...client.CallOption) (*GetProjectResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.GetProject", in)
	out := new(GetProjectResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) ListProject(ctx context.Context, in *ListProjectRequest, opts ...client.CallOption) (*ListProjectResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.ListProject", in)
	out := new(ListProjectResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) CreateCloud(ctx context.Context, in *CreateCloudRequest, opts ...client.CallOption) (*CreateCloudResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.CreateCloud", in)
	out := new(CreateCloudResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) UpdateCloud(ctx context.Context, in *UpdateCloudRequest, opts ...client.CallOption) (*UpdateCloudResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.UpdateCloud", in)
	out := new(UpdateCloudResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) DeleteCloud(ctx context.Context, in *DeleteCloudRequest, opts ...client.CallOption) (*DeleteCloudResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.DeleteCloud", in)
	out := new(DeleteCloudResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) GetCloud(ctx context.Context, in *GetCloudRequest, opts ...client.CallOption) (*GetCloudResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.GetCloud", in)
	out := new(GetCloudResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) ListCloud(ctx context.Context, in *ListCloudRequest, opts ...client.CallOption) (*ListCloudResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.ListCloud", in)
	out := new(ListCloudResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) CreateCloudVPC(ctx context.Context, in *CreateCloudVPCRequest, opts ...client.CallOption) (*CreateCloudVPCResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.CreateCloudVPC", in)
	out := new(CreateCloudVPCResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) UpdateCloudVPC(ctx context.Context, in *UpdateCloudVPCRequest, opts ...client.CallOption) (*UpdateCloudVPCResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.UpdateCloudVPC", in)
	out := new(UpdateCloudVPCResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) DeleteCloudVPC(ctx context.Context, in *DeleteCloudVPCRequest, opts ...client.CallOption) (*DeleteCloudVPCResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.DeleteCloudVPC", in)
	out := new(DeleteCloudVPCResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) ListCloudVPC(ctx context.Context, in *ListCloudVPCRequest, opts ...client.CallOption) (*ListCloudVPCResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.ListCloudVPC", in)
	out := new(ListCloudVPCResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) ListCloudRegions(ctx context.Context, in *ListCloudRegionsRequest, opts ...client.CallOption) (*ListCloudRegionsResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.ListCloudRegions", in)
	out := new(ListCloudRegionsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) GetVPCCidr(ctx context.Context, in *GetVPCCidrRequest, opts ...client.CallOption) (*GetVPCCidrResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.GetVPCCidr", in)
	out := new(GetVPCCidrResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) CreateNodeGroup(ctx context.Context, in *CreateNodeGroupRequest, opts ...client.CallOption) (*CreateNodeGroupResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.CreateNodeGroup", in)
	out := new(CreateNodeGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) UpdateNodeGroup(ctx context.Context, in *UpdateNodeGroupRequest, opts ...client.CallOption) (*UpdateNodeGroupResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.UpdateNodeGroup", in)
	out := new(UpdateNodeGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) DeleteNodeGroup(ctx context.Context, in *DeleteNodeGroupRequest, opts ...client.CallOption) (*DeleteNodeGroupResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.DeleteNodeGroup", in)
	out := new(DeleteNodeGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) GetNodeGroup(ctx context.Context, in *GetNodeGroupRequest, opts ...client.CallOption) (*GetNodeGroupResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.GetNodeGroup", in)
	out := new(GetNodeGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) ListNodeGroup(ctx context.Context, in *ListNodeGroupRequest, opts ...client.CallOption) (*ListNodeGroupResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.ListNodeGroup", in)
	out := new(ListNodeGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) MoveNodesToGroup(ctx context.Context, in *MoveNodesToGroupRequest, opts ...client.CallOption) (*MoveNodesToGroupResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.MoveNodesToGroup", in)
	out := new(MoveNodesToGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) RemoveNodesFromGroup(ctx context.Context, in *RemoveNodesFromGroupRequest, opts ...client.CallOption) (*RemoveNodesFromGroupResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.RemoveNodesFromGroup", in)
	out := new(RemoveNodesFromGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) CleanNodesInGroup(ctx context.Context, in *CleanNodesInGroupRequest, opts ...client.CallOption) (*CleanNodesInGroupResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.CleanNodesInGroup", in)
	out := new(CleanNodesInGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) ListNodesInGroup(ctx context.Context, in *GetNodeGroupRequest, opts ...client.CallOption) (*ListNodesInGroupResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.ListNodesInGroup", in)
	out := new(ListNodesInGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) UpdateGroupDesiredNode(ctx context.Context, in *UpdateGroupDesiredNodeRequest, opts ...client.CallOption) (*UpdateGroupDesiredNodeResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.UpdateGroupDesiredNode", in)
	out := new(UpdateGroupDesiredNodeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) UpdateGroupDesiredSize(ctx context.Context, in *UpdateGroupDesiredSizeRequest, opts ...client.CallOption) (*UpdateGroupDesiredSizeResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.UpdateGroupDesiredSize", in)
	out := new(UpdateGroupDesiredSizeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) UpdateGroupMinMaxSize(ctx context.Context, in *UpdateGroupMinMaxSizeRequest, opts ...client.CallOption) (*UpdateGroupMinMaxSizeResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.UpdateGroupMinMaxSize", in)
	out := new(UpdateGroupMinMaxSizeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) EnableNodeGroupAutoScale(ctx context.Context, in *EnableNodeGroupAutoScaleRequest, opts ...client.CallOption) (*EnableNodeGroupAutoScaleResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.EnableNodeGroupAutoScale", in)
	out := new(EnableNodeGroupAutoScaleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) DisableNodeGroupAutoScale(ctx context.Context, in *DisableNodeGroupAutoScaleRequest, opts ...client.CallOption) (*DisableNodeGroupAutoScaleResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.DisableNodeGroupAutoScale", in)
	out := new(DisableNodeGroupAutoScaleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...client.CallOption) (*CreateTaskResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.CreateTask", in)
	out := new(CreateTaskResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) RetryTask(ctx context.Context, in *RetryTaskRequest, opts ...client.CallOption) (*RetryTaskResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.RetryTask", in)
	out := new(RetryTaskResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...client.CallOption) (*UpdateTaskResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.UpdateTask", in)
	out := new(UpdateTaskResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...client.CallOption) (*DeleteTaskResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.DeleteTask", in)
	out := new(DeleteTaskResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) GetTask(ctx context.Context, in *GetTaskRequest, opts ...client.CallOption) (*GetTaskResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.GetTask", in)
	out := new(GetTaskResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) ListTask(ctx context.Context, in *ListTaskRequest, opts ...client.CallOption) (*ListTaskResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.ListTask", in)
	out := new(ListTaskResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) CreateAutoScalingOption(ctx context.Context, in *CreateAutoScalingOptionRequest, opts ...client.CallOption) (*CreateAutoScalingOptionResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.CreateAutoScalingOption", in)
	out := new(CreateAutoScalingOptionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) UpdateAutoScalingOption(ctx context.Context, in *UpdateAutoScalingOptionRequest, opts ...client.CallOption) (*UpdateAutoScalingOptionResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.UpdateAutoScalingOption", in)
	out := new(UpdateAutoScalingOptionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) DeleteAutoScalingOption(ctx context.Context, in *DeleteAutoScalingOptionRequest, opts ...client.CallOption) (*DeleteAutoScalingOptionResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.DeleteAutoScalingOption", in)
	out := new(DeleteAutoScalingOptionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) GetAutoScalingOption(ctx context.Context, in *GetAutoScalingOptionRequest, opts ...client.CallOption) (*GetAutoScalingOptionResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.GetAutoScalingOption", in)
	out := new(GetAutoScalingOptionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) ListAutoScalingOption(ctx context.Context, in *ListAutoScalingOptionRequest, opts ...client.CallOption) (*ListAutoScalingOptionResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.ListAutoScalingOption", in)
	out := new(ListAutoScalingOptionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) CreateNodeTemplate(ctx context.Context, in *CreateNodeTemplateRequest, opts ...client.CallOption) (*CreateNodeTemplateResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.CreateNodeTemplate", in)
	out := new(CreateNodeTemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) UpdateNodeTemplate(ctx context.Context, in *UpdateNodeTemplateRequest, opts ...client.CallOption) (*UpdateNodeTemplateResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.UpdateNodeTemplate", in)
	out := new(UpdateNodeTemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) DeleteNodeTemplate(ctx context.Context, in *DeleteNodeTemplateRequest, opts ...client.CallOption) (*DeleteNodeTemplateResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.DeleteNodeTemplate", in)
	out := new(DeleteNodeTemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) ListNodeTemplate(ctx context.Context, in *ListNodeTemplateRequest, opts ...client.CallOption) (*ListNodeTemplateResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.ListNodeTemplate", in)
	out := new(ListNodeTemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) GetNodeTemplate(ctx context.Context, in *GetNodeTemplateRequest, opts ...client.CallOption) (*GetNodeTemplateResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.GetNodeTemplate", in)
	out := new(GetNodeTemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) CreateCloudAccount(ctx context.Context, in *CreateCloudAccountRequest, opts ...client.CallOption) (*CreateCloudAccountResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.CreateCloudAccount", in)
	out := new(CreateCloudAccountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) UpdateCloudAccount(ctx context.Context, in *UpdateCloudAccountRequest, opts ...client.CallOption) (*UpdateCloudAccountResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.UpdateCloudAccount", in)
	out := new(UpdateCloudAccountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) DeleteCloudAccount(ctx context.Context, in *DeleteCloudAccountRequest, opts ...client.CallOption) (*DeleteCloudAccountResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.DeleteCloudAccount", in)
	out := new(DeleteCloudAccountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) ListCloudAccount(ctx context.Context, in *ListCloudAccountRequest, opts ...client.CallOption) (*ListCloudAccountResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.ListCloudAccount", in)
	out := new(ListCloudAccountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) GetCloudRegions(ctx context.Context, in *GetCloudRegionsRequest, opts ...client.CallOption) (*GetCloudRegionsResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.GetCloudRegions", in)
	out := new(GetCloudRegionsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) GetCloudRegionZones(ctx context.Context, in *GetCloudRegionZonesRequest, opts ...client.CallOption) (*GetCloudRegionZonesResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.GetCloudRegionZones", in)
	out := new(GetCloudRegionZonesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) ListCloudRegionCluster(ctx context.Context, in *ListCloudRegionClusterRequest, opts ...client.CallOption) (*ListCloudRegionClusterResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.ListCloudRegionCluster", in)
	out := new(ListCloudRegionClusterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) ListCloudSubnets(ctx context.Context, in *ListCloudSubnetsRequest, opts ...client.CallOption) (*ListCloudSubnetsResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.ListCloudSubnets", in)
	out := new(ListCloudSubnetsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) ListCloudSecurityGroups(ctx context.Context, in *ListCloudSecurityGroupsRequest, opts ...client.CallOption) (*ListCloudSecurityGroupsResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.ListCloudSecurityGroups", in)
	out := new(ListCloudSecurityGroupsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) ListCloudInstanceTypes(ctx context.Context, in *ListCloudInstanceTypeRequest, opts ...client.CallOption) (*ListCloudInstanceTypeResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.ListCloudInstanceTypes", in)
	out := new(ListCloudInstanceTypeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) ListCloudOsImage(ctx context.Context, in *ListCloudOsImageRequest, opts ...client.CallOption) (*ListCloudOsImageResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.ListCloudOsImage", in)
	out := new(ListCloudOsImageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) GetBkSopsTemplateList(ctx context.Context, in *GetBkSopsTemplateListRequest, opts ...client.CallOption) (*GetBkSopsTemplateListResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.GetBkSopsTemplateList", in)
	out := new(GetBkSopsTemplateListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) GetBkSopsTemplateInfo(ctx context.Context, in *GetBkSopsTemplateInfoRequest, opts ...client.CallOption) (*GetBkSopsTemplateInfoResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.GetBkSopsTemplateInfo", in)
	out := new(GetBkSopsTemplateInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) GetInnerTemplateValues(ctx context.Context, in *GetInnerTemplateValuesRequest, opts ...client.CallOption) (*GetInnerTemplateValuesResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.GetInnerTemplateValues", in)
	out := new(GetInnerTemplateValuesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) DebugBkSopsTask(ctx context.Context, in *DebugBkSopsTaskRequest, opts ...client.CallOption) (*DebugBkSopsTaskResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.DebugBkSopsTask", in)
	out := new(DebugBkSopsTaskResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) CreateCloudModuleFlag(ctx context.Context, in *CreateCloudModuleFlagRequest, opts ...client.CallOption) (*CreateCloudModuleFlagResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.CreateCloudModuleFlag", in)
	out := new(CreateCloudModuleFlagResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) UpdateCloudModuleFlag(ctx context.Context, in *UpdateCloudModuleFlagRequest, opts ...client.CallOption) (*UpdateCloudModuleFlagResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.UpdateCloudModuleFlag", in)
	out := new(UpdateCloudModuleFlagResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) DeleteCloudModuleFlag(ctx context.Context, in *DeleteCloudModuleFlagRequest, opts ...client.CallOption) (*DeleteCloudModuleFlagResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.DeleteCloudModuleFlag", in)
	out := new(DeleteCloudModuleFlagResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) ListCloudModuleFlag(ctx context.Context, in *ListCloudModuleFlagRequest, opts ...client.CallOption) (*ListCloudModuleFlagResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.ListCloudModuleFlag", in)
	out := new(ListCloudModuleFlagResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerService) Health(ctx context.Context, in *HealthRequest, opts ...client.CallOption) (*HealthResponse, error) {
	req := c.c.NewRequest(c.name, "ClusterManager.Health", in)
	out := new(HealthResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ClusterManager service

type ClusterManagerHandler interface {
	//* cluster management
	CreateCluster(context.Context, *CreateClusterReq, *CreateClusterResp) error
	RetryCreateClusterTask(context.Context, *RetryCreateClusterReq, *RetryCreateClusterResp) error
	CheckCloudKubeConfig(context.Context, *KubeConfigReq, *KubeConfigResp) error
	ImportCluster(context.Context, *ImportClusterReq, *ImportClusterResp) error
	UpdateCluster(context.Context, *UpdateClusterReq, *UpdateClusterResp) error
	AddNodesToCluster(context.Context, *AddNodesRequest, *AddNodesResponse) error
	DeleteNodesFromCluster(context.Context, *DeleteNodesRequest, *DeleteNodesResponse) error
	ListNodesInCluster(context.Context, *ListNodesInClusterRequest, *ListNodesInClusterResponse) error
	DeleteCluster(context.Context, *DeleteClusterReq, *DeleteClusterResp) error
	GetCluster(context.Context, *GetClusterReq, *GetClusterResp) error
	ListCluster(context.Context, *ListClusterReq, *ListClusterResp) error
	ListCommonCluster(context.Context, *ListCommonClusterReq, *ListCommonClusterResp) error
	//* node management
	GetNode(context.Context, *GetNodeRequest, *GetNodeResponse) error
	GetNodeInfo(context.Context, *GetNodeInfoRequest, *GetNodeInfoResponse) error
	UpdateNode(context.Context, *UpdateNodeRequest, *UpdateNodeResponse) error
	CheckNodeInCluster(context.Context, *CheckNodesRequest, *CheckNodesResponse) error
	CordonNode(context.Context, *CordonNodeRequest, *CordonNodeResponse) error
	UnCordonNode(context.Context, *UnCordonNodeRequest, *UnCordonNodeResponse) error
	//* cluster credential management
	GetClusterCredential(context.Context, *GetClusterCredentialReq, *GetClusterCredentialResp) error
	UpdateClusterCredential(context.Context, *UpdateClusterCredentialReq, *UpdateClusterCredentialResp) error
	DeleteClusterCredential(context.Context, *DeleteClusterCredentialReq, *DeleteClusterCredentialResp) error
	ListClusterCredential(context.Context, *ListClusterCredentialReq, *ListClusterCredentialResp) error
	//* federation cluster management
	InitFederationCluster(context.Context, *InitFederationClusterReq, *InitFederationClusterResp) error
	AddFederatedCluster(context.Context, *AddFederatedClusterReq, *AddFederatedClusterResp) error
	//* namespace management *
	CreateNamespace(context.Context, *CreateNamespaceReq, *CreateNamespaceResp) error
	UpdateNamespace(context.Context, *UpdateNamespaceReq, *UpdateNamespaceResp) error
	DeleteNamespace(context.Context, *DeleteNamespaceReq, *DeleteNamespaceResp) error
	GetNamespace(context.Context, *GetNamespaceReq, *GetNamespaceResp) error
	ListNamespace(context.Context, *ListNamespaceReq, *ListNamespaceResp) error
	//* NamespaceQuota management *
	CreateNamespaceQuota(context.Context, *CreateNamespaceQuotaReq, *CreateNamespaceQuotaResp) error
	UpdateNamespaceQuota(context.Context, *UpdateNamespaceQuotaReq, *UpdateNamespaceQuotaResp) error
	DeleteNamespaceQuota(context.Context, *DeleteNamespaceQuotaReq, *DeleteNamespaceQuotaResp) error
	GetNamespaceQuota(context.Context, *GetNamespaceQuotaReq, *GetNamespaceQuotaResp) error
	ListNamespaceQuota(context.Context, *ListNamespaceQuotaReq, *ListNamespaceQuotaResp) error
	CreateNamespaceWithQuota(context.Context, *CreateNamespaceWithQuotaReq, *CreateNamespaceWithQuotaResp) error
	//* project information management *
	CreateProject(context.Context, *CreateProjectRequest, *CreateProjectResponse) error
	UpdateProject(context.Context, *UpdateProjectRequest, *UpdateProjectResponse) error
	DeleteProject(context.Context, *DeleteProjectRequest, *DeleteProjectResponse) error
	GetProject(context.Context, *GetProjectRequest, *GetProjectResponse) error
	ListProject(context.Context, *ListProjectRequest, *ListProjectResponse) error
	//* Cloud information management *
	CreateCloud(context.Context, *CreateCloudRequest, *CreateCloudResponse) error
	UpdateCloud(context.Context, *UpdateCloudRequest, *UpdateCloudResponse) error
	DeleteCloud(context.Context, *DeleteCloudRequest, *DeleteCloudResponse) error
	GetCloud(context.Context, *GetCloudRequest, *GetCloudResponse) error
	ListCloud(context.Context, *ListCloudRequest, *ListCloudResponse) error
	//* Cloud VPC information management *
	CreateCloudVPC(context.Context, *CreateCloudVPCRequest, *CreateCloudVPCResponse) error
	UpdateCloudVPC(context.Context, *UpdateCloudVPCRequest, *UpdateCloudVPCResponse) error
	DeleteCloudVPC(context.Context, *DeleteCloudVPCRequest, *DeleteCloudVPCResponse) error
	ListCloudVPC(context.Context, *ListCloudVPCRequest, *ListCloudVPCResponse) error
	ListCloudRegions(context.Context, *ListCloudRegionsRequest, *ListCloudRegionsResponse) error
	GetVPCCidr(context.Context, *GetVPCCidrRequest, *GetVPCCidrResponse) error
	//* NodeGroup information management *
	CreateNodeGroup(context.Context, *CreateNodeGroupRequest, *CreateNodeGroupResponse) error
	UpdateNodeGroup(context.Context, *UpdateNodeGroupRequest, *UpdateNodeGroupResponse) error
	DeleteNodeGroup(context.Context, *DeleteNodeGroupRequest, *DeleteNodeGroupResponse) error
	GetNodeGroup(context.Context, *GetNodeGroupRequest, *GetNodeGroupResponse) error
	ListNodeGroup(context.Context, *ListNodeGroupRequest, *ListNodeGroupResponse) error
	MoveNodesToGroup(context.Context, *MoveNodesToGroupRequest, *MoveNodesToGroupResponse) error
	RemoveNodesFromGroup(context.Context, *RemoveNodesFromGroupRequest, *RemoveNodesFromGroupResponse) error
	CleanNodesInGroup(context.Context, *CleanNodesInGroupRequest, *CleanNodesInGroupResponse) error
	ListNodesInGroup(context.Context, *GetNodeGroupRequest, *ListNodesInGroupResponse) error
	UpdateGroupDesiredNode(context.Context, *UpdateGroupDesiredNodeRequest, *UpdateGroupDesiredNodeResponse) error
	UpdateGroupDesiredSize(context.Context, *UpdateGroupDesiredSizeRequest, *UpdateGroupDesiredSizeResponse) error
	UpdateGroupMinMaxSize(context.Context, *UpdateGroupMinMaxSizeRequest, *UpdateGroupMinMaxSizeResponse) error
	EnableNodeGroupAutoScale(context.Context, *EnableNodeGroupAutoScaleRequest, *EnableNodeGroupAutoScaleResponse) error
	DisableNodeGroupAutoScale(context.Context, *DisableNodeGroupAutoScaleRequest, *DisableNodeGroupAutoScaleResponse) error
	//* Task information management *
	CreateTask(context.Context, *CreateTaskRequest, *CreateTaskResponse) error
	RetryTask(context.Context, *RetryTaskRequest, *RetryTaskResponse) error
	UpdateTask(context.Context, *UpdateTaskRequest, *UpdateTaskResponse) error
	DeleteTask(context.Context, *DeleteTaskRequest, *DeleteTaskResponse) error
	GetTask(context.Context, *GetTaskRequest, *GetTaskResponse) error
	ListTask(context.Context, *ListTaskRequest, *ListTaskResponse) error
	//* ClusterAutoScalingOption information management *
	CreateAutoScalingOption(context.Context, *CreateAutoScalingOptionRequest, *CreateAutoScalingOptionResponse) error
	UpdateAutoScalingOption(context.Context, *UpdateAutoScalingOptionRequest, *UpdateAutoScalingOptionResponse) error
	DeleteAutoScalingOption(context.Context, *DeleteAutoScalingOptionRequest, *DeleteAutoScalingOptionResponse) error
	GetAutoScalingOption(context.Context, *GetAutoScalingOptionRequest, *GetAutoScalingOptionResponse) error
	ListAutoScalingOption(context.Context, *ListAutoScalingOptionRequest, *ListAutoScalingOptionResponse) error
	// Cloud NodeTemplate info management
	CreateNodeTemplate(context.Context, *CreateNodeTemplateRequest, *CreateNodeTemplateResponse) error
	UpdateNodeTemplate(context.Context, *UpdateNodeTemplateRequest, *UpdateNodeTemplateResponse) error
	DeleteNodeTemplate(context.Context, *DeleteNodeTemplateRequest, *DeleteNodeTemplateResponse) error
	ListNodeTemplate(context.Context, *ListNodeTemplateRequest, *ListNodeTemplateResponse) error
	GetNodeTemplate(context.Context, *GetNodeTemplateRequest, *GetNodeTemplateResponse) error
	// Cloud Account information management
	CreateCloudAccount(context.Context, *CreateCloudAccountRequest, *CreateCloudAccountResponse) error
	UpdateCloudAccount(context.Context, *UpdateCloudAccountRequest, *UpdateCloudAccountResponse) error
	DeleteCloudAccount(context.Context, *DeleteCloudAccountRequest, *DeleteCloudAccountResponse) error
	ListCloudAccount(context.Context, *ListCloudAccountRequest, *ListCloudAccountResponse) error
	// Cloud Resource management
	GetCloudRegions(context.Context, *GetCloudRegionsRequest, *GetCloudRegionsResponse) error
	GetCloudRegionZones(context.Context, *GetCloudRegionZonesRequest, *GetCloudRegionZonesResponse) error
	ListCloudRegionCluster(context.Context, *ListCloudRegionClusterRequest, *ListCloudRegionClusterResponse) error
	ListCloudSubnets(context.Context, *ListCloudSubnetsRequest, *ListCloudSubnetsResponse) error
	ListCloudSecurityGroups(context.Context, *ListCloudSecurityGroupsRequest, *ListCloudSecurityGroupsResponse) error
	ListCloudInstanceTypes(context.Context, *ListCloudInstanceTypeRequest, *ListCloudInstanceTypeResponse) error
	ListCloudOsImage(context.Context, *ListCloudOsImageRequest, *ListCloudOsImageResponse) error
	// thirdParty interface(cmdb/bksops等)
	GetBkSopsTemplateList(context.Context, *GetBkSopsTemplateListRequest, *GetBkSopsTemplateListResponse) error
	GetBkSopsTemplateInfo(context.Context, *GetBkSopsTemplateInfoRequest, *GetBkSopsTemplateInfoResponse) error
	GetInnerTemplateValues(context.Context, *GetInnerTemplateValuesRequest, *GetInnerTemplateValuesResponse) error
	DebugBkSopsTask(context.Context, *DebugBkSopsTaskRequest, *DebugBkSopsTaskResponse) error
	// Cloud module flag management
	CreateCloudModuleFlag(context.Context, *CreateCloudModuleFlagRequest, *CreateCloudModuleFlagResponse) error
	UpdateCloudModuleFlag(context.Context, *UpdateCloudModuleFlagRequest, *UpdateCloudModuleFlagResponse) error
	DeleteCloudModuleFlag(context.Context, *DeleteCloudModuleFlagRequest, *DeleteCloudModuleFlagResponse) error
	ListCloudModuleFlag(context.Context, *ListCloudModuleFlagRequest, *ListCloudModuleFlagResponse) error
	// cluster manager health interface
	Health(context.Context, *HealthRequest, *HealthResponse) error
}

func RegisterClusterManagerHandler(s server.Server, hdlr ClusterManagerHandler, opts ...server.HandlerOption) error {
	type clusterManager interface {
		CreateCluster(ctx context.Context, in *CreateClusterReq, out *CreateClusterResp) error
		RetryCreateClusterTask(ctx context.Context, in *RetryCreateClusterReq, out *RetryCreateClusterResp) error
		CheckCloudKubeConfig(ctx context.Context, in *KubeConfigReq, out *KubeConfigResp) error
		ImportCluster(ctx context.Context, in *ImportClusterReq, out *ImportClusterResp) error
		UpdateCluster(ctx context.Context, in *UpdateClusterReq, out *UpdateClusterResp) error
		AddNodesToCluster(ctx context.Context, in *AddNodesRequest, out *AddNodesResponse) error
		DeleteNodesFromCluster(ctx context.Context, in *DeleteNodesRequest, out *DeleteNodesResponse) error
		ListNodesInCluster(ctx context.Context, in *ListNodesInClusterRequest, out *ListNodesInClusterResponse) error
		DeleteCluster(ctx context.Context, in *DeleteClusterReq, out *DeleteClusterResp) error
		GetCluster(ctx context.Context, in *GetClusterReq, out *GetClusterResp) error
		ListCluster(ctx context.Context, in *ListClusterReq, out *ListClusterResp) error
		ListCommonCluster(ctx context.Context, in *ListCommonClusterReq, out *ListCommonClusterResp) error
		GetNode(ctx context.Context, in *GetNodeRequest, out *GetNodeResponse) error
		GetNodeInfo(ctx context.Context, in *GetNodeInfoRequest, out *GetNodeInfoResponse) error
		UpdateNode(ctx context.Context, in *UpdateNodeRequest, out *UpdateNodeResponse) error
		CheckNodeInCluster(ctx context.Context, in *CheckNodesRequest, out *CheckNodesResponse) error
		CordonNode(ctx context.Context, in *CordonNodeRequest, out *CordonNodeResponse) error
		UnCordonNode(ctx context.Context, in *UnCordonNodeRequest, out *UnCordonNodeResponse) error
		GetClusterCredential(ctx context.Context, in *GetClusterCredentialReq, out *GetClusterCredentialResp) error
		UpdateClusterCredential(ctx context.Context, in *UpdateClusterCredentialReq, out *UpdateClusterCredentialResp) error
		DeleteClusterCredential(ctx context.Context, in *DeleteClusterCredentialReq, out *DeleteClusterCredentialResp) error
		ListClusterCredential(ctx context.Context, in *ListClusterCredentialReq, out *ListClusterCredentialResp) error
		InitFederationCluster(ctx context.Context, in *InitFederationClusterReq, out *InitFederationClusterResp) error
		AddFederatedCluster(ctx context.Context, in *AddFederatedClusterReq, out *AddFederatedClusterResp) error
		CreateNamespace(ctx context.Context, in *CreateNamespaceReq, out *CreateNamespaceResp) error
		UpdateNamespace(ctx context.Context, in *UpdateNamespaceReq, out *UpdateNamespaceResp) error
		DeleteNamespace(ctx context.Context, in *DeleteNamespaceReq, out *DeleteNamespaceResp) error
		GetNamespace(ctx context.Context, in *GetNamespaceReq, out *GetNamespaceResp) error
		ListNamespace(ctx context.Context, in *ListNamespaceReq, out *ListNamespaceResp) error
		CreateNamespaceQuota(ctx context.Context, in *CreateNamespaceQuotaReq, out *CreateNamespaceQuotaResp) error
		UpdateNamespaceQuota(ctx context.Context, in *UpdateNamespaceQuotaReq, out *UpdateNamespaceQuotaResp) error
		DeleteNamespaceQuota(ctx context.Context, in *DeleteNamespaceQuotaReq, out *DeleteNamespaceQuotaResp) error
		GetNamespaceQuota(ctx context.Context, in *GetNamespaceQuotaReq, out *GetNamespaceQuotaResp) error
		ListNamespaceQuota(ctx context.Context, in *ListNamespaceQuotaReq, out *ListNamespaceQuotaResp) error
		CreateNamespaceWithQuota(ctx context.Context, in *CreateNamespaceWithQuotaReq, out *CreateNamespaceWithQuotaResp) error
		CreateProject(ctx context.Context, in *CreateProjectRequest, out *CreateProjectResponse) error
		UpdateProject(ctx context.Context, in *UpdateProjectRequest, out *UpdateProjectResponse) error
		DeleteProject(ctx context.Context, in *DeleteProjectRequest, out *DeleteProjectResponse) error
		GetProject(ctx context.Context, in *GetProjectRequest, out *GetProjectResponse) error
		ListProject(ctx context.Context, in *ListProjectRequest, out *ListProjectResponse) error
		CreateCloud(ctx context.Context, in *CreateCloudRequest, out *CreateCloudResponse) error
		UpdateCloud(ctx context.Context, in *UpdateCloudRequest, out *UpdateCloudResponse) error
		DeleteCloud(ctx context.Context, in *DeleteCloudRequest, out *DeleteCloudResponse) error
		GetCloud(ctx context.Context, in *GetCloudRequest, out *GetCloudResponse) error
		ListCloud(ctx context.Context, in *ListCloudRequest, out *ListCloudResponse) error
		CreateCloudVPC(ctx context.Context, in *CreateCloudVPCRequest, out *CreateCloudVPCResponse) error
		UpdateCloudVPC(ctx context.Context, in *UpdateCloudVPCRequest, out *UpdateCloudVPCResponse) error
		DeleteCloudVPC(ctx context.Context, in *DeleteCloudVPCRequest, out *DeleteCloudVPCResponse) error
		ListCloudVPC(ctx context.Context, in *ListCloudVPCRequest, out *ListCloudVPCResponse) error
		ListCloudRegions(ctx context.Context, in *ListCloudRegionsRequest, out *ListCloudRegionsResponse) error
		GetVPCCidr(ctx context.Context, in *GetVPCCidrRequest, out *GetVPCCidrResponse) error
		CreateNodeGroup(ctx context.Context, in *CreateNodeGroupRequest, out *CreateNodeGroupResponse) error
		UpdateNodeGroup(ctx context.Context, in *UpdateNodeGroupRequest, out *UpdateNodeGroupResponse) error
		DeleteNodeGroup(ctx context.Context, in *DeleteNodeGroupRequest, out *DeleteNodeGroupResponse) error
		GetNodeGroup(ctx context.Context, in *GetNodeGroupRequest, out *GetNodeGroupResponse) error
		ListNodeGroup(ctx context.Context, in *ListNodeGroupRequest, out *ListNodeGroupResponse) error
		MoveNodesToGroup(ctx context.Context, in *MoveNodesToGroupRequest, out *MoveNodesToGroupResponse) error
		RemoveNodesFromGroup(ctx context.Context, in *RemoveNodesFromGroupRequest, out *RemoveNodesFromGroupResponse) error
		CleanNodesInGroup(ctx context.Context, in *CleanNodesInGroupRequest, out *CleanNodesInGroupResponse) error
		ListNodesInGroup(ctx context.Context, in *GetNodeGroupRequest, out *ListNodesInGroupResponse) error
		UpdateGroupDesiredNode(ctx context.Context, in *UpdateGroupDesiredNodeRequest, out *UpdateGroupDesiredNodeResponse) error
		UpdateGroupDesiredSize(ctx context.Context, in *UpdateGroupDesiredSizeRequest, out *UpdateGroupDesiredSizeResponse) error
		UpdateGroupMinMaxSize(ctx context.Context, in *UpdateGroupMinMaxSizeRequest, out *UpdateGroupMinMaxSizeResponse) error
		EnableNodeGroupAutoScale(ctx context.Context, in *EnableNodeGroupAutoScaleRequest, out *EnableNodeGroupAutoScaleResponse) error
		DisableNodeGroupAutoScale(ctx context.Context, in *DisableNodeGroupAutoScaleRequest, out *DisableNodeGroupAutoScaleResponse) error
		CreateTask(ctx context.Context, in *CreateTaskRequest, out *CreateTaskResponse) error
		RetryTask(ctx context.Context, in *RetryTaskRequest, out *RetryTaskResponse) error
		UpdateTask(ctx context.Context, in *UpdateTaskRequest, out *UpdateTaskResponse) error
		DeleteTask(ctx context.Context, in *DeleteTaskRequest, out *DeleteTaskResponse) error
		GetTask(ctx context.Context, in *GetTaskRequest, out *GetTaskResponse) error
		ListTask(ctx context.Context, in *ListTaskRequest, out *ListTaskResponse) error
		CreateAutoScalingOption(ctx context.Context, in *CreateAutoScalingOptionRequest, out *CreateAutoScalingOptionResponse) error
		UpdateAutoScalingOption(ctx context.Context, in *UpdateAutoScalingOptionRequest, out *UpdateAutoScalingOptionResponse) error
		DeleteAutoScalingOption(ctx context.Context, in *DeleteAutoScalingOptionRequest, out *DeleteAutoScalingOptionResponse) error
		GetAutoScalingOption(ctx context.Context, in *GetAutoScalingOptionRequest, out *GetAutoScalingOptionResponse) error
		ListAutoScalingOption(ctx context.Context, in *ListAutoScalingOptionRequest, out *ListAutoScalingOptionResponse) error
		CreateNodeTemplate(ctx context.Context, in *CreateNodeTemplateRequest, out *CreateNodeTemplateResponse) error
		UpdateNodeTemplate(ctx context.Context, in *UpdateNodeTemplateRequest, out *UpdateNodeTemplateResponse) error
		DeleteNodeTemplate(ctx context.Context, in *DeleteNodeTemplateRequest, out *DeleteNodeTemplateResponse) error
		ListNodeTemplate(ctx context.Context, in *ListNodeTemplateRequest, out *ListNodeTemplateResponse) error
		GetNodeTemplate(ctx context.Context, in *GetNodeTemplateRequest, out *GetNodeTemplateResponse) error
		CreateCloudAccount(ctx context.Context, in *CreateCloudAccountRequest, out *CreateCloudAccountResponse) error
		UpdateCloudAccount(ctx context.Context, in *UpdateCloudAccountRequest, out *UpdateCloudAccountResponse) error
		DeleteCloudAccount(ctx context.Context, in *DeleteCloudAccountRequest, out *DeleteCloudAccountResponse) error
		ListCloudAccount(ctx context.Context, in *ListCloudAccountRequest, out *ListCloudAccountResponse) error
		GetCloudRegions(ctx context.Context, in *GetCloudRegionsRequest, out *GetCloudRegionsResponse) error
		GetCloudRegionZones(ctx context.Context, in *GetCloudRegionZonesRequest, out *GetCloudRegionZonesResponse) error
		ListCloudRegionCluster(ctx context.Context, in *ListCloudRegionClusterRequest, out *ListCloudRegionClusterResponse) error
		ListCloudSubnets(ctx context.Context, in *ListCloudSubnetsRequest, out *ListCloudSubnetsResponse) error
		ListCloudSecurityGroups(ctx context.Context, in *ListCloudSecurityGroupsRequest, out *ListCloudSecurityGroupsResponse) error
		ListCloudInstanceTypes(ctx context.Context, in *ListCloudInstanceTypeRequest, out *ListCloudInstanceTypeResponse) error
		ListCloudOsImage(ctx context.Context, in *ListCloudOsImageRequest, out *ListCloudOsImageResponse) error
		GetBkSopsTemplateList(ctx context.Context, in *GetBkSopsTemplateListRequest, out *GetBkSopsTemplateListResponse) error
		GetBkSopsTemplateInfo(ctx context.Context, in *GetBkSopsTemplateInfoRequest, out *GetBkSopsTemplateInfoResponse) error
		GetInnerTemplateValues(ctx context.Context, in *GetInnerTemplateValuesRequest, out *GetInnerTemplateValuesResponse) error
		DebugBkSopsTask(ctx context.Context, in *DebugBkSopsTaskRequest, out *DebugBkSopsTaskResponse) error
		CreateCloudModuleFlag(ctx context.Context, in *CreateCloudModuleFlagRequest, out *CreateCloudModuleFlagResponse) error
		UpdateCloudModuleFlag(ctx context.Context, in *UpdateCloudModuleFlagRequest, out *UpdateCloudModuleFlagResponse) error
		DeleteCloudModuleFlag(ctx context.Context, in *DeleteCloudModuleFlagRequest, out *DeleteCloudModuleFlagResponse) error
		ListCloudModuleFlag(ctx context.Context, in *ListCloudModuleFlagRequest, out *ListCloudModuleFlagResponse) error
		Health(ctx context.Context, in *HealthRequest, out *HealthResponse) error
	}
	type ClusterManager struct {
		clusterManager
	}
	h := &clusterManagerHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.CreateCluster",
		Path:    []string{"/clustermanager/v1/cluster"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.RetryCreateClusterTask",
		Path:    []string{"/clustermanager/v1/cluster/{clusterID}/retry"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.CheckCloudKubeConfig",
		Path:    []string{"/clustermanager/v1/cloud/kubeConfig"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.ImportCluster",
		Path:    []string{"/clustermanager/v1/cluster/import"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.UpdateCluster",
		Path:    []string{"/clustermanager/v1/cluster/{clusterID}"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.AddNodesToCluster",
		Path:    []string{"/clustermanager/v1/cluster/{clusterID}/node"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.DeleteNodesFromCluster",
		Path:    []string{"/clustermanager/v1/cluster/{clusterID}/node"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.ListNodesInCluster",
		Path:    []string{"/clustermanager/v1/cluster/{clusterID}/node"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.DeleteCluster",
		Path:    []string{"/clustermanager/v1/cluster/{clusterID}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.GetCluster",
		Path:    []string{"/clustermanager/v1/cluster/{clusterID}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.ListCluster",
		Path:    []string{"/clustermanager/v1/cluster"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.ListCommonCluster",
		Path:    []string{"/clustermanager/v1/sharedclusters"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.GetNode",
		Path:    []string{"/clustermanager/v1/node/{innerIP}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.GetNodeInfo",
		Path:    []string{"/clustermanager/v1/node/{innerIP}/info"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.UpdateNode",
		Path:    []string{"/clustermanager/v1/node"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.CheckNodeInCluster",
		Path:    []string{"/clustermanager/v1/node/available"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.CordonNode",
		Path:    []string{"/clustermanager/v1/node/cordon"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.UnCordonNode",
		Path:    []string{"/clustermanager/v1/node/uncordon"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.GetClusterCredential",
		Path:    []string{"/clustermanager/v1/clustercredential/{serverKey}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.UpdateClusterCredential",
		Path:    []string{"/clustermanager/v1/clustercredential/{serverKey}"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.DeleteClusterCredential",
		Path:    []string{"/clustermanager/v1/clustercredential/{serverKey}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.ListClusterCredential",
		Path:    []string{"/clustermanager/v1/clustercredential"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.InitFederationCluster",
		Path:    []string{"/clustermanager/v1/initfedcluster"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.AddFederatedCluster",
		Path:    []string{"/clustermanager/v1/addfederatedcluster"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.CreateNamespace",
		Path:    []string{"/clustermanager/v1/namespace/{federationClusterID}/{name}"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.UpdateNamespace",
		Path:    []string{"/clustermanager/v1/namespace/{federationClusterID}/{name}"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.DeleteNamespace",
		Path:    []string{"/clustermanager/v1/namespace/{federationClusterID}/{name}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.GetNamespace",
		Path:    []string{"/clustermanager/v1/namespace/{federationClusterID}/{name}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.ListNamespace",
		Path:    []string{"/clustermanager/v1/namespace"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.CreateNamespaceQuota",
		Path:    []string{"/clustermanager/v1/namespacequota/{federationClusterID}/{namespace}"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.UpdateNamespaceQuota",
		Path:    []string{"/clustermanager/v1/namespacequota/{federationClusterID}/{namespace}"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.DeleteNamespaceQuota",
		Path:    []string{"/clustermanager/v1/namespacequota/{federationClusterID}/{namespace}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.GetNamespaceQuota",
		Path:    []string{"/clustermanager/v1/namespacequota/{federationClusterID}/{namespace}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.ListNamespaceQuota",
		Path:    []string{"/clustermanager/v1/namespacequota"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.CreateNamespaceWithQuota",
		Path:    []string{"/clustermanager/v1/namespacewithquota"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.CreateProject",
		Path:    []string{"/clustermanager/v1/project"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.UpdateProject",
		Path:    []string{"/clustermanager/v1/project/{projectID}"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.DeleteProject",
		Path:    []string{"/clustermanager/v1/project/{projectID}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.GetProject",
		Path:    []string{"/clustermanager/v1/project/{projectID}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.ListProject",
		Path:    []string{"/clustermanager/v1/project"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.CreateCloud",
		Path:    []string{"/clustermanager/v1/cloud"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.UpdateCloud",
		Path:    []string{"/clustermanager/v1/cloud/{cloudID}"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.DeleteCloud",
		Path:    []string{"/clustermanager/v1/cloud/{cloudID}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.GetCloud",
		Path:    []string{"/clustermanager/v1/cloud/{cloudID}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.ListCloud",
		Path:    []string{"/clustermanager/v1/cloud"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.CreateCloudVPC",
		Path:    []string{"/clustermanager/v1/cloudvpc"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.UpdateCloudVPC",
		Path:    []string{"/clustermanager/v1/cloudvpc/{cloudID}/{vpcID}"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.DeleteCloudVPC",
		Path:    []string{"/clustermanager/v1/cloudvpc/{cloudID}/{vpcID}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.ListCloudVPC",
		Path:    []string{"/clustermanager/v1/cloudvpc"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.ListCloudRegions",
		Path:    []string{"/clustermanager/v1/cloudregion/{cloudID}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.GetVPCCidr",
		Path:    []string{"/clustermanager/v1/vpccidr/{vpcID}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.CreateNodeGroup",
		Path:    []string{"/clustermanager/v1/nodegroup"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.UpdateNodeGroup",
		Path:    []string{"/clustermanager/v1/nodegroup/{nodeGroupID}"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.DeleteNodeGroup",
		Path:    []string{"/clustermanager/v1/nodegroup/{nodeGroupID}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.GetNodeGroup",
		Path:    []string{"/clustermanager/v1/nodegroup/{nodeGroupID}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.ListNodeGroup",
		Path:    []string{"/clustermanager/v1/nodegroup"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.MoveNodesToGroup",
		Path:    []string{"/clustermanager/v1/nodegroup/{nodeGroupID}/node"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.RemoveNodesFromGroup",
		Path:    []string{"/clustermanager/v1/nodegroup/{nodeGroupID}/node"},
		Method:  []string{"DELETE"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.CleanNodesInGroup",
		Path:    []string{"/clustermanager/v1/nodegroup/{nodeGroupID}/groupnode"},
		Method:  []string{"DELETE"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.ListNodesInGroup",
		Path:    []string{"/clustermanager/v1/nodegroup/{nodeGroupID}/node"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.UpdateGroupDesiredNode",
		Path:    []string{"/clustermanager/v1/nodegroup/{nodeGroupID}/desirednode"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.UpdateGroupDesiredSize",
		Path:    []string{"/clustermanager/v1/nodegroup/{nodeGroupID}/desiredsize"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.UpdateGroupMinMaxSize",
		Path:    []string{"/clustermanager/v1/nodegroup/{nodeGroupID}/boundsize"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.EnableNodeGroupAutoScale",
		Path:    []string{"/clustermanager/v1/nodegroup/{nodeGroupID}/autoscale/enable"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.DisableNodeGroupAutoScale",
		Path:    []string{"/clustermanager/v1/nodegroup/{nodeGroupID}/autoscale/disable"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.CreateTask",
		Path:    []string{"/clustermanager/v1/task"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.RetryTask",
		Path:    []string{"/clustermanager/v1/task/{taskID}/retry"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.UpdateTask",
		Path:    []string{"/clustermanager/v1/task/{taskID}"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.DeleteTask",
		Path:    []string{"/clustermanager/v1/task/{taskID}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.GetTask",
		Path:    []string{"/clustermanager/v1/task/{taskID}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.ListTask",
		Path:    []string{"/clustermanager/v1/task"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.CreateAutoScalingOption",
		Path:    []string{"/clustermanager/v1/autoscalingoption"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.UpdateAutoScalingOption",
		Path:    []string{"/clustermanager/v1/autoscalingoption/{clusterID}"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.DeleteAutoScalingOption",
		Path:    []string{"/clustermanager/v1/autoscalingoption/{clusterID}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.GetAutoScalingOption",
		Path:    []string{"/clustermanager/v1/autoscalingoption/{clusterID}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.ListAutoScalingOption",
		Path:    []string{"/clustermanager/v1/autoscalingoption"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.CreateNodeTemplate",
		Path:    []string{"/clustermanager/v1/projects/{projectID}/nodetemplates"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.UpdateNodeTemplate",
		Path:    []string{"/clustermanager/v1/projects/{projectID}/nodetemplates/{nodeTemplateID}"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.DeleteNodeTemplate",
		Path:    []string{"/clustermanager/v1/projects/{projectID}/nodetemplates/{nodeTemplateID}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.ListNodeTemplate",
		Path:    []string{"/clustermanager/v1/projects/{projectID}/nodetemplates"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.GetNodeTemplate",
		Path:    []string{"/clustermanager/v1/projects/{projectID}/nodetemplates/{nodeTemplateID}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.CreateCloudAccount",
		Path:    []string{"/clustermanager/v1/clouds/{cloudID}/accounts"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.UpdateCloudAccount",
		Path:    []string{"/clustermanager/v1/clouds/{cloudID}/accounts/{accountID}"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.DeleteCloudAccount",
		Path:    []string{"/clustermanager/v1/clouds/{cloudID}/accounts/{accountID}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.ListCloudAccount",
		Path:    []string{"/clustermanager/v1/clouds/{cloudID}/accounts"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.GetCloudRegions",
		Path:    []string{"/clustermanager/v1/clouds/{cloudID}/regions"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.GetCloudRegionZones",
		Path:    []string{"/clustermanager/v1/clouds/{cloudID}/zones"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.ListCloudRegionCluster",
		Path:    []string{"/clustermanager/v1/clouds/{cloudID}/clusters"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.ListCloudSubnets",
		Path:    []string{"/clustermanager/v1/clouds/{cloudID}/subnets"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.ListCloudSecurityGroups",
		Path:    []string{"/clustermanager/v1/clouds/{cloudID}/securitygroups"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.ListCloudInstanceTypes",
		Path:    []string{"/clustermanager/v1/clouds/{cloudID}/instancetypes"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.ListCloudOsImage",
		Path:    []string{"/clustermanager/v1/clouds/{cloudID}/osimage"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.GetBkSopsTemplateList",
		Path:    []string{"/clustermanager/v1/bksops/business/{businessID}/templates"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.GetBkSopsTemplateInfo",
		Path:    []string{"/clustermanager/v1/bksops/business/{businessID}/templates/{templateID}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.GetInnerTemplateValues",
		Path:    []string{"/clustermanager/v1/bksops/templatevalues"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.DebugBkSopsTask",
		Path:    []string{"/clustermanager/v1/bksops/debug"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.CreateCloudModuleFlag",
		Path:    []string{"/clustermanager/v1/clouds/{cloudID}/versions/{version}/modules"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.UpdateCloudModuleFlag",
		Path:    []string{"/clustermanager/v1/clouds/{cloudID}/versions/{version}/modules/{moduleID}"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.DeleteCloudModuleFlag",
		Path:    []string{"/clustermanager/v1/clouds/{cloudID}/versions/{version}/modules/{moduleID}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.ListCloudModuleFlag",
		Path:    []string{"/clustermanager/v1/clouds/{cloudID}/versions/{version}/modules/{moduleID}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterManager.Health",
		Path:    []string{"/clustermanager/v1/health"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&ClusterManager{h}, opts...))
}

type clusterManagerHandler struct {
	ClusterManagerHandler
}

func (h *clusterManagerHandler) CreateCluster(ctx context.Context, in *CreateClusterReq, out *CreateClusterResp) error {
	return h.ClusterManagerHandler.CreateCluster(ctx, in, out)
}

func (h *clusterManagerHandler) RetryCreateClusterTask(ctx context.Context, in *RetryCreateClusterReq, out *RetryCreateClusterResp) error {
	return h.ClusterManagerHandler.RetryCreateClusterTask(ctx, in, out)
}

func (h *clusterManagerHandler) CheckCloudKubeConfig(ctx context.Context, in *KubeConfigReq, out *KubeConfigResp) error {
	return h.ClusterManagerHandler.CheckCloudKubeConfig(ctx, in, out)
}

func (h *clusterManagerHandler) ImportCluster(ctx context.Context, in *ImportClusterReq, out *ImportClusterResp) error {
	return h.ClusterManagerHandler.ImportCluster(ctx, in, out)
}

func (h *clusterManagerHandler) UpdateCluster(ctx context.Context, in *UpdateClusterReq, out *UpdateClusterResp) error {
	return h.ClusterManagerHandler.UpdateCluster(ctx, in, out)
}

func (h *clusterManagerHandler) AddNodesToCluster(ctx context.Context, in *AddNodesRequest, out *AddNodesResponse) error {
	return h.ClusterManagerHandler.AddNodesToCluster(ctx, in, out)
}

func (h *clusterManagerHandler) DeleteNodesFromCluster(ctx context.Context, in *DeleteNodesRequest, out *DeleteNodesResponse) error {
	return h.ClusterManagerHandler.DeleteNodesFromCluster(ctx, in, out)
}

func (h *clusterManagerHandler) ListNodesInCluster(ctx context.Context, in *ListNodesInClusterRequest, out *ListNodesInClusterResponse) error {
	return h.ClusterManagerHandler.ListNodesInCluster(ctx, in, out)
}

func (h *clusterManagerHandler) DeleteCluster(ctx context.Context, in *DeleteClusterReq, out *DeleteClusterResp) error {
	return h.ClusterManagerHandler.DeleteCluster(ctx, in, out)
}

func (h *clusterManagerHandler) GetCluster(ctx context.Context, in *GetClusterReq, out *GetClusterResp) error {
	return h.ClusterManagerHandler.GetCluster(ctx, in, out)
}

func (h *clusterManagerHandler) ListCluster(ctx context.Context, in *ListClusterReq, out *ListClusterResp) error {
	return h.ClusterManagerHandler.ListCluster(ctx, in, out)
}

func (h *clusterManagerHandler) ListCommonCluster(ctx context.Context, in *ListCommonClusterReq, out *ListCommonClusterResp) error {
	return h.ClusterManagerHandler.ListCommonCluster(ctx, in, out)
}

func (h *clusterManagerHandler) GetNode(ctx context.Context, in *GetNodeRequest, out *GetNodeResponse) error {
	return h.ClusterManagerHandler.GetNode(ctx, in, out)
}

func (h *clusterManagerHandler) GetNodeInfo(ctx context.Context, in *GetNodeInfoRequest, out *GetNodeInfoResponse) error {
	return h.ClusterManagerHandler.GetNodeInfo(ctx, in, out)
}

func (h *clusterManagerHandler) UpdateNode(ctx context.Context, in *UpdateNodeRequest, out *UpdateNodeResponse) error {
	return h.ClusterManagerHandler.UpdateNode(ctx, in, out)
}

func (h *clusterManagerHandler) CheckNodeInCluster(ctx context.Context, in *CheckNodesRequest, out *CheckNodesResponse) error {
	return h.ClusterManagerHandler.CheckNodeInCluster(ctx, in, out)
}

func (h *clusterManagerHandler) CordonNode(ctx context.Context, in *CordonNodeRequest, out *CordonNodeResponse) error {
	return h.ClusterManagerHandler.CordonNode(ctx, in, out)
}

func (h *clusterManagerHandler) UnCordonNode(ctx context.Context, in *UnCordonNodeRequest, out *UnCordonNodeResponse) error {
	return h.ClusterManagerHandler.UnCordonNode(ctx, in, out)
}

func (h *clusterManagerHandler) GetClusterCredential(ctx context.Context, in *GetClusterCredentialReq, out *GetClusterCredentialResp) error {
	return h.ClusterManagerHandler.GetClusterCredential(ctx, in, out)
}

func (h *clusterManagerHandler) UpdateClusterCredential(ctx context.Context, in *UpdateClusterCredentialReq, out *UpdateClusterCredentialResp) error {
	return h.ClusterManagerHandler.UpdateClusterCredential(ctx, in, out)
}

func (h *clusterManagerHandler) DeleteClusterCredential(ctx context.Context, in *DeleteClusterCredentialReq, out *DeleteClusterCredentialResp) error {
	return h.ClusterManagerHandler.DeleteClusterCredential(ctx, in, out)
}

func (h *clusterManagerHandler) ListClusterCredential(ctx context.Context, in *ListClusterCredentialReq, out *ListClusterCredentialResp) error {
	return h.ClusterManagerHandler.ListClusterCredential(ctx, in, out)
}

func (h *clusterManagerHandler) InitFederationCluster(ctx context.Context, in *InitFederationClusterReq, out *InitFederationClusterResp) error {
	return h.ClusterManagerHandler.InitFederationCluster(ctx, in, out)
}

func (h *clusterManagerHandler) AddFederatedCluster(ctx context.Context, in *AddFederatedClusterReq, out *AddFederatedClusterResp) error {
	return h.ClusterManagerHandler.AddFederatedCluster(ctx, in, out)
}

func (h *clusterManagerHandler) CreateNamespace(ctx context.Context, in *CreateNamespaceReq, out *CreateNamespaceResp) error {
	return h.ClusterManagerHandler.CreateNamespace(ctx, in, out)
}

func (h *clusterManagerHandler) UpdateNamespace(ctx context.Context, in *UpdateNamespaceReq, out *UpdateNamespaceResp) error {
	return h.ClusterManagerHandler.UpdateNamespace(ctx, in, out)
}

func (h *clusterManagerHandler) DeleteNamespace(ctx context.Context, in *DeleteNamespaceReq, out *DeleteNamespaceResp) error {
	return h.ClusterManagerHandler.DeleteNamespace(ctx, in, out)
}

func (h *clusterManagerHandler) GetNamespace(ctx context.Context, in *GetNamespaceReq, out *GetNamespaceResp) error {
	return h.ClusterManagerHandler.GetNamespace(ctx, in, out)
}

func (h *clusterManagerHandler) ListNamespace(ctx context.Context, in *ListNamespaceReq, out *ListNamespaceResp) error {
	return h.ClusterManagerHandler.ListNamespace(ctx, in, out)
}

func (h *clusterManagerHandler) CreateNamespaceQuota(ctx context.Context, in *CreateNamespaceQuotaReq, out *CreateNamespaceQuotaResp) error {
	return h.ClusterManagerHandler.CreateNamespaceQuota(ctx, in, out)
}

func (h *clusterManagerHandler) UpdateNamespaceQuota(ctx context.Context, in *UpdateNamespaceQuotaReq, out *UpdateNamespaceQuotaResp) error {
	return h.ClusterManagerHandler.UpdateNamespaceQuota(ctx, in, out)
}

func (h *clusterManagerHandler) DeleteNamespaceQuota(ctx context.Context, in *DeleteNamespaceQuotaReq, out *DeleteNamespaceQuotaResp) error {
	return h.ClusterManagerHandler.DeleteNamespaceQuota(ctx, in, out)
}

func (h *clusterManagerHandler) GetNamespaceQuota(ctx context.Context, in *GetNamespaceQuotaReq, out *GetNamespaceQuotaResp) error {
	return h.ClusterManagerHandler.GetNamespaceQuota(ctx, in, out)
}

func (h *clusterManagerHandler) ListNamespaceQuota(ctx context.Context, in *ListNamespaceQuotaReq, out *ListNamespaceQuotaResp) error {
	return h.ClusterManagerHandler.ListNamespaceQuota(ctx, in, out)
}

func (h *clusterManagerHandler) CreateNamespaceWithQuota(ctx context.Context, in *CreateNamespaceWithQuotaReq, out *CreateNamespaceWithQuotaResp) error {
	return h.ClusterManagerHandler.CreateNamespaceWithQuota(ctx, in, out)
}

func (h *clusterManagerHandler) CreateProject(ctx context.Context, in *CreateProjectRequest, out *CreateProjectResponse) error {
	return h.ClusterManagerHandler.CreateProject(ctx, in, out)
}

func (h *clusterManagerHandler) UpdateProject(ctx context.Context, in *UpdateProjectRequest, out *UpdateProjectResponse) error {
	return h.ClusterManagerHandler.UpdateProject(ctx, in, out)
}

func (h *clusterManagerHandler) DeleteProject(ctx context.Context, in *DeleteProjectRequest, out *DeleteProjectResponse) error {
	return h.ClusterManagerHandler.DeleteProject(ctx, in, out)
}

func (h *clusterManagerHandler) GetProject(ctx context.Context, in *GetProjectRequest, out *GetProjectResponse) error {
	return h.ClusterManagerHandler.GetProject(ctx, in, out)
}

func (h *clusterManagerHandler) ListProject(ctx context.Context, in *ListProjectRequest, out *ListProjectResponse) error {
	return h.ClusterManagerHandler.ListProject(ctx, in, out)
}

func (h *clusterManagerHandler) CreateCloud(ctx context.Context, in *CreateCloudRequest, out *CreateCloudResponse) error {
	return h.ClusterManagerHandler.CreateCloud(ctx, in, out)
}

func (h *clusterManagerHandler) UpdateCloud(ctx context.Context, in *UpdateCloudRequest, out *UpdateCloudResponse) error {
	return h.ClusterManagerHandler.UpdateCloud(ctx, in, out)
}

func (h *clusterManagerHandler) DeleteCloud(ctx context.Context, in *DeleteCloudRequest, out *DeleteCloudResponse) error {
	return h.ClusterManagerHandler.DeleteCloud(ctx, in, out)
}

func (h *clusterManagerHandler) GetCloud(ctx context.Context, in *GetCloudRequest, out *GetCloudResponse) error {
	return h.ClusterManagerHandler.GetCloud(ctx, in, out)
}

func (h *clusterManagerHandler) ListCloud(ctx context.Context, in *ListCloudRequest, out *ListCloudResponse) error {
	return h.ClusterManagerHandler.ListCloud(ctx, in, out)
}

func (h *clusterManagerHandler) CreateCloudVPC(ctx context.Context, in *CreateCloudVPCRequest, out *CreateCloudVPCResponse) error {
	return h.ClusterManagerHandler.CreateCloudVPC(ctx, in, out)
}

func (h *clusterManagerHandler) UpdateCloudVPC(ctx context.Context, in *UpdateCloudVPCRequest, out *UpdateCloudVPCResponse) error {
	return h.ClusterManagerHandler.UpdateCloudVPC(ctx, in, out)
}

func (h *clusterManagerHandler) DeleteCloudVPC(ctx context.Context, in *DeleteCloudVPCRequest, out *DeleteCloudVPCResponse) error {
	return h.ClusterManagerHandler.DeleteCloudVPC(ctx, in, out)
}

func (h *clusterManagerHandler) ListCloudVPC(ctx context.Context, in *ListCloudVPCRequest, out *ListCloudVPCResponse) error {
	return h.ClusterManagerHandler.ListCloudVPC(ctx, in, out)
}

func (h *clusterManagerHandler) ListCloudRegions(ctx context.Context, in *ListCloudRegionsRequest, out *ListCloudRegionsResponse) error {
	return h.ClusterManagerHandler.ListCloudRegions(ctx, in, out)
}

func (h *clusterManagerHandler) GetVPCCidr(ctx context.Context, in *GetVPCCidrRequest, out *GetVPCCidrResponse) error {
	return h.ClusterManagerHandler.GetVPCCidr(ctx, in, out)
}

func (h *clusterManagerHandler) CreateNodeGroup(ctx context.Context, in *CreateNodeGroupRequest, out *CreateNodeGroupResponse) error {
	return h.ClusterManagerHandler.CreateNodeGroup(ctx, in, out)
}

func (h *clusterManagerHandler) UpdateNodeGroup(ctx context.Context, in *UpdateNodeGroupRequest, out *UpdateNodeGroupResponse) error {
	return h.ClusterManagerHandler.UpdateNodeGroup(ctx, in, out)
}

func (h *clusterManagerHandler) DeleteNodeGroup(ctx context.Context, in *DeleteNodeGroupRequest, out *DeleteNodeGroupResponse) error {
	return h.ClusterManagerHandler.DeleteNodeGroup(ctx, in, out)
}

func (h *clusterManagerHandler) GetNodeGroup(ctx context.Context, in *GetNodeGroupRequest, out *GetNodeGroupResponse) error {
	return h.ClusterManagerHandler.GetNodeGroup(ctx, in, out)
}

func (h *clusterManagerHandler) ListNodeGroup(ctx context.Context, in *ListNodeGroupRequest, out *ListNodeGroupResponse) error {
	return h.ClusterManagerHandler.ListNodeGroup(ctx, in, out)
}

func (h *clusterManagerHandler) MoveNodesToGroup(ctx context.Context, in *MoveNodesToGroupRequest, out *MoveNodesToGroupResponse) error {
	return h.ClusterManagerHandler.MoveNodesToGroup(ctx, in, out)
}

func (h *clusterManagerHandler) RemoveNodesFromGroup(ctx context.Context, in *RemoveNodesFromGroupRequest, out *RemoveNodesFromGroupResponse) error {
	return h.ClusterManagerHandler.RemoveNodesFromGroup(ctx, in, out)
}

func (h *clusterManagerHandler) CleanNodesInGroup(ctx context.Context, in *CleanNodesInGroupRequest, out *CleanNodesInGroupResponse) error {
	return h.ClusterManagerHandler.CleanNodesInGroup(ctx, in, out)
}

func (h *clusterManagerHandler) ListNodesInGroup(ctx context.Context, in *GetNodeGroupRequest, out *ListNodesInGroupResponse) error {
	return h.ClusterManagerHandler.ListNodesInGroup(ctx, in, out)
}

func (h *clusterManagerHandler) UpdateGroupDesiredNode(ctx context.Context, in *UpdateGroupDesiredNodeRequest, out *UpdateGroupDesiredNodeResponse) error {
	return h.ClusterManagerHandler.UpdateGroupDesiredNode(ctx, in, out)
}

func (h *clusterManagerHandler) UpdateGroupDesiredSize(ctx context.Context, in *UpdateGroupDesiredSizeRequest, out *UpdateGroupDesiredSizeResponse) error {
	return h.ClusterManagerHandler.UpdateGroupDesiredSize(ctx, in, out)
}

func (h *clusterManagerHandler) UpdateGroupMinMaxSize(ctx context.Context, in *UpdateGroupMinMaxSizeRequest, out *UpdateGroupMinMaxSizeResponse) error {
	return h.ClusterManagerHandler.UpdateGroupMinMaxSize(ctx, in, out)
}

func (h *clusterManagerHandler) EnableNodeGroupAutoScale(ctx context.Context, in *EnableNodeGroupAutoScaleRequest, out *EnableNodeGroupAutoScaleResponse) error {
	return h.ClusterManagerHandler.EnableNodeGroupAutoScale(ctx, in, out)
}

func (h *clusterManagerHandler) DisableNodeGroupAutoScale(ctx context.Context, in *DisableNodeGroupAutoScaleRequest, out *DisableNodeGroupAutoScaleResponse) error {
	return h.ClusterManagerHandler.DisableNodeGroupAutoScale(ctx, in, out)
}

func (h *clusterManagerHandler) CreateTask(ctx context.Context, in *CreateTaskRequest, out *CreateTaskResponse) error {
	return h.ClusterManagerHandler.CreateTask(ctx, in, out)
}

func (h *clusterManagerHandler) RetryTask(ctx context.Context, in *RetryTaskRequest, out *RetryTaskResponse) error {
	return h.ClusterManagerHandler.RetryTask(ctx, in, out)
}

func (h *clusterManagerHandler) UpdateTask(ctx context.Context, in *UpdateTaskRequest, out *UpdateTaskResponse) error {
	return h.ClusterManagerHandler.UpdateTask(ctx, in, out)
}

func (h *clusterManagerHandler) DeleteTask(ctx context.Context, in *DeleteTaskRequest, out *DeleteTaskResponse) error {
	return h.ClusterManagerHandler.DeleteTask(ctx, in, out)
}

func (h *clusterManagerHandler) GetTask(ctx context.Context, in *GetTaskRequest, out *GetTaskResponse) error {
	return h.ClusterManagerHandler.GetTask(ctx, in, out)
}

func (h *clusterManagerHandler) ListTask(ctx context.Context, in *ListTaskRequest, out *ListTaskResponse) error {
	return h.ClusterManagerHandler.ListTask(ctx, in, out)
}

func (h *clusterManagerHandler) CreateAutoScalingOption(ctx context.Context, in *CreateAutoScalingOptionRequest, out *CreateAutoScalingOptionResponse) error {
	return h.ClusterManagerHandler.CreateAutoScalingOption(ctx, in, out)
}

func (h *clusterManagerHandler) UpdateAutoScalingOption(ctx context.Context, in *UpdateAutoScalingOptionRequest, out *UpdateAutoScalingOptionResponse) error {
	return h.ClusterManagerHandler.UpdateAutoScalingOption(ctx, in, out)
}

func (h *clusterManagerHandler) DeleteAutoScalingOption(ctx context.Context, in *DeleteAutoScalingOptionRequest, out *DeleteAutoScalingOptionResponse) error {
	return h.ClusterManagerHandler.DeleteAutoScalingOption(ctx, in, out)
}

func (h *clusterManagerHandler) GetAutoScalingOption(ctx context.Context, in *GetAutoScalingOptionRequest, out *GetAutoScalingOptionResponse) error {
	return h.ClusterManagerHandler.GetAutoScalingOption(ctx, in, out)
}

func (h *clusterManagerHandler) ListAutoScalingOption(ctx context.Context, in *ListAutoScalingOptionRequest, out *ListAutoScalingOptionResponse) error {
	return h.ClusterManagerHandler.ListAutoScalingOption(ctx, in, out)
}

func (h *clusterManagerHandler) CreateNodeTemplate(ctx context.Context, in *CreateNodeTemplateRequest, out *CreateNodeTemplateResponse) error {
	return h.ClusterManagerHandler.CreateNodeTemplate(ctx, in, out)
}

func (h *clusterManagerHandler) UpdateNodeTemplate(ctx context.Context, in *UpdateNodeTemplateRequest, out *UpdateNodeTemplateResponse) error {
	return h.ClusterManagerHandler.UpdateNodeTemplate(ctx, in, out)
}

func (h *clusterManagerHandler) DeleteNodeTemplate(ctx context.Context, in *DeleteNodeTemplateRequest, out *DeleteNodeTemplateResponse) error {
	return h.ClusterManagerHandler.DeleteNodeTemplate(ctx, in, out)
}

func (h *clusterManagerHandler) ListNodeTemplate(ctx context.Context, in *ListNodeTemplateRequest, out *ListNodeTemplateResponse) error {
	return h.ClusterManagerHandler.ListNodeTemplate(ctx, in, out)
}

func (h *clusterManagerHandler) GetNodeTemplate(ctx context.Context, in *GetNodeTemplateRequest, out *GetNodeTemplateResponse) error {
	return h.ClusterManagerHandler.GetNodeTemplate(ctx, in, out)
}

func (h *clusterManagerHandler) CreateCloudAccount(ctx context.Context, in *CreateCloudAccountRequest, out *CreateCloudAccountResponse) error {
	return h.ClusterManagerHandler.CreateCloudAccount(ctx, in, out)
}

func (h *clusterManagerHandler) UpdateCloudAccount(ctx context.Context, in *UpdateCloudAccountRequest, out *UpdateCloudAccountResponse) error {
	return h.ClusterManagerHandler.UpdateCloudAccount(ctx, in, out)
}

func (h *clusterManagerHandler) DeleteCloudAccount(ctx context.Context, in *DeleteCloudAccountRequest, out *DeleteCloudAccountResponse) error {
	return h.ClusterManagerHandler.DeleteCloudAccount(ctx, in, out)
}

func (h *clusterManagerHandler) ListCloudAccount(ctx context.Context, in *ListCloudAccountRequest, out *ListCloudAccountResponse) error {
	return h.ClusterManagerHandler.ListCloudAccount(ctx, in, out)
}

func (h *clusterManagerHandler) GetCloudRegions(ctx context.Context, in *GetCloudRegionsRequest, out *GetCloudRegionsResponse) error {
	return h.ClusterManagerHandler.GetCloudRegions(ctx, in, out)
}

func (h *clusterManagerHandler) GetCloudRegionZones(ctx context.Context, in *GetCloudRegionZonesRequest, out *GetCloudRegionZonesResponse) error {
	return h.ClusterManagerHandler.GetCloudRegionZones(ctx, in, out)
}

func (h *clusterManagerHandler) ListCloudRegionCluster(ctx context.Context, in *ListCloudRegionClusterRequest, out *ListCloudRegionClusterResponse) error {
	return h.ClusterManagerHandler.ListCloudRegionCluster(ctx, in, out)
}

func (h *clusterManagerHandler) ListCloudSubnets(ctx context.Context, in *ListCloudSubnetsRequest, out *ListCloudSubnetsResponse) error {
	return h.ClusterManagerHandler.ListCloudSubnets(ctx, in, out)
}

func (h *clusterManagerHandler) ListCloudSecurityGroups(ctx context.Context, in *ListCloudSecurityGroupsRequest, out *ListCloudSecurityGroupsResponse) error {
	return h.ClusterManagerHandler.ListCloudSecurityGroups(ctx, in, out)
}

func (h *clusterManagerHandler) ListCloudInstanceTypes(ctx context.Context, in *ListCloudInstanceTypeRequest, out *ListCloudInstanceTypeResponse) error {
	return h.ClusterManagerHandler.ListCloudInstanceTypes(ctx, in, out)
}

func (h *clusterManagerHandler) ListCloudOsImage(ctx context.Context, in *ListCloudOsImageRequest, out *ListCloudOsImageResponse) error {
	return h.ClusterManagerHandler.ListCloudOsImage(ctx, in, out)
}

func (h *clusterManagerHandler) GetBkSopsTemplateList(ctx context.Context, in *GetBkSopsTemplateListRequest, out *GetBkSopsTemplateListResponse) error {
	return h.ClusterManagerHandler.GetBkSopsTemplateList(ctx, in, out)
}

func (h *clusterManagerHandler) GetBkSopsTemplateInfo(ctx context.Context, in *GetBkSopsTemplateInfoRequest, out *GetBkSopsTemplateInfoResponse) error {
	return h.ClusterManagerHandler.GetBkSopsTemplateInfo(ctx, in, out)
}

func (h *clusterManagerHandler) GetInnerTemplateValues(ctx context.Context, in *GetInnerTemplateValuesRequest, out *GetInnerTemplateValuesResponse) error {
	return h.ClusterManagerHandler.GetInnerTemplateValues(ctx, in, out)
}

func (h *clusterManagerHandler) DebugBkSopsTask(ctx context.Context, in *DebugBkSopsTaskRequest, out *DebugBkSopsTaskResponse) error {
	return h.ClusterManagerHandler.DebugBkSopsTask(ctx, in, out)
}

func (h *clusterManagerHandler) CreateCloudModuleFlag(ctx context.Context, in *CreateCloudModuleFlagRequest, out *CreateCloudModuleFlagResponse) error {
	return h.ClusterManagerHandler.CreateCloudModuleFlag(ctx, in, out)
}

func (h *clusterManagerHandler) UpdateCloudModuleFlag(ctx context.Context, in *UpdateCloudModuleFlagRequest, out *UpdateCloudModuleFlagResponse) error {
	return h.ClusterManagerHandler.UpdateCloudModuleFlag(ctx, in, out)
}

func (h *clusterManagerHandler) DeleteCloudModuleFlag(ctx context.Context, in *DeleteCloudModuleFlagRequest, out *DeleteCloudModuleFlagResponse) error {
	return h.ClusterManagerHandler.DeleteCloudModuleFlag(ctx, in, out)
}

func (h *clusterManagerHandler) ListCloudModuleFlag(ctx context.Context, in *ListCloudModuleFlagRequest, out *ListCloudModuleFlagResponse) error {
	return h.ClusterManagerHandler.ListCloudModuleFlag(ctx, in, out)
}

func (h *clusterManagerHandler) Health(ctx context.Context, in *HealthRequest, out *HealthResponse) error {
	return h.ClusterManagerHandler.Health(ctx, in, out)
}
